{
  "cwd": "/Users/yanfang/MOM/BDC/frontend",
  "pkg": {
    "private": true,
    "author": "fangsn <fangsn@gmail.com>",
    "scripts": {
      "dev": "max dev",
      "build": "max build",
      "format": "prettier --cache --write .",
      "prepare": "husky install",
      "postinstall": "max setup",
      "setup": "max setup",
      "start": "npm run dev",
      "openapi2ts": "bash ./scripts/openapi2ts.sh"
    },
    "dependencies": {
      "@ant-design/icons": "^5.0.1",
      "@ant-design/pro-components": "^2.4.4",
      "@antv/g6": "^5.0.48",
      "@antv/graphin": "latest",
      "@antv/graphin-components": "^2.4.1",
      "@antv/graphin-icons": "^1.0.0",
      "@monaco-editor/react": "^4.7.0",
      "@types/cytoscape-d3-force": "^1.0.0",
      "@types/d3": "^7.4.3",
      "@umijs/max": "^4.4.11",
      "antd": "^5.4.0",
      "cytoscape": "^3.32.0",
      "cytoscape-cola": "^2.5.1",
      "cytoscape-d3-force": "^1.1.4",
      "cytoscape-react": "^4.0.0",
      "d3": "^7.9.0",
      "d3-graph-controller": "^3.1.1",
      "react-force-graph": "^1.47.7",
      "react-force-graph-2d": "^1.27.1"
    },
    "devDependencies": {
      "@types/cytoscape": "^3.21.9",
      "@types/react": "^19.1.8",
      "@types/react-dom": "^19.1.6",
      "@umijs/openapi": "^1.13.0",
      "@umijs/plugin-openapi": "^1.3.3",
      "husky": "^9",
      "lint-staged": "^13.2.0",
      "prettier": "^2.8.7",
      "prettier-plugin-organize-imports": "^3.2.2",
      "prettier-plugin-packagejson": "^2.4.3",
      "typescript": "^5.0.3"
    }
  },
  "pkgPath": "/Users/yanfang/MOM/BDC/frontend/package.json",
  "plugins": {
    "./node_modules/@umijs/core/dist/service/servicePlugin": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "preset",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/core/dist/service/servicePlugin.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/core/dist/service/servicePlugin",
      "key": "servicePlugin"
    },
    "@umijs/preset-umi": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 8
      },
      "enableBy": "register",
      "type": "preset",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/index.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "@umijs/preset-umi",
      "key": "umi"
    },
    "./node_modules/@umijs/max/dist/preset": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 3
      },
      "enableBy": "register",
      "type": "preset",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/max/dist/preset.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/max/dist/preset",
      "key": "preset"
    },
    "./node_modules/@umijs/preset-umi/dist/registerMethods": {
      "config": {},
      "time": {
        "hooks": {
          "onStart": [
            0
          ]
        },
        "register": 3
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/registerMethods.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/registerMethods",
      "key": "registerMethods"
    },
    "@umijs/did-you-know": {
      "config": {},
      "time": {
        "hooks": {
          "onStart": [
            1
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/did-you-know/dist/plugin.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "@umijs/did-you-know",
      "key": "umijsDidYouKnow"
    },
    "./node_modules/@umijs/preset-umi/dist/features/404/404": {
      "config": {},
      "time": {
        "hooks": {
          "modifyRoutes": [
            0
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/404/404.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/404/404",
      "key": "404"
    },
    "./node_modules/@umijs/preset-umi/dist/features/appData/appData": {
      "config": {},
      "time": {
        "hooks": {
          "modifyAppData": [
            11
          ]
        },
        "register": 14
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/appData/appData.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/appData/appData",
      "key": "appData"
    },
    "./node_modules/@umijs/preset-umi/dist/features/appData/umiInfo": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/appData/umiInfo.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/appData/umiInfo",
      "key": "umiInfo"
    },
    "./node_modules/@umijs/preset-umi/dist/features/check/check": {
      "config": {},
      "time": {
        "hooks": {
          "onCheckConfig": [
            0
          ],
          "onCheck": [
            0
          ]
        },
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/check/check.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/check/check",
      "key": "check"
    },
    "./node_modules/@umijs/preset-umi/dist/features/check/babel722": {
      "config": {},
      "time": {
        "hooks": {
          "onCheck": [
            1
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/check/babel722.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/check/babel722",
      "key": "babel722"
    },
    "./node_modules/@umijs/preset-umi/dist/features/codeSplitting/codeSplitting": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/codeSplitting/codeSplitting.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/codeSplitting/codeSplitting",
      "key": "codeSplitting"
    },
    "./node_modules/@umijs/preset-umi/dist/features/configPlugins/configPlugins": {
      "config": {},
      "time": {
        "hooks": {
          "modifyConfig": [
            0
          ]
        },
        "register": 5
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/configPlugins/configPlugins.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/configPlugins/configPlugins",
      "key": "configPlugins"
    },
    "virtual: config-title": {
      "id": "virtual: config-title",
      "key": "title",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-styles": {
      "id": "virtual: config-styles",
      "key": "styles",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-scripts": {
      "id": "virtual: config-scripts",
      "key": "scripts",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-routes": {
      "id": "virtual: config-routes",
      "key": "routes",
      "config": {
        "onChange": "regenerateTmpFiles"
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-routeLoader": {
      "id": "virtual: config-routeLoader",
      "key": "routeLoader",
      "config": {
        "default": {
          "moduleType": "esm"
        }
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-reactRouter5Compat": {
      "id": "virtual: config-reactRouter5Compat",
      "key": "reactRouter5Compat",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-presets": {
      "id": "virtual: config-presets",
      "key": "presets",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-plugins": {
      "id": "virtual: config-plugins",
      "key": "plugins",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-npmClient": {
      "id": "virtual: config-npmClient",
      "key": "npmClient",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-mountElementId": {
      "id": "virtual: config-mountElementId",
      "key": "mountElementId",
      "config": {
        "default": "root"
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-metas": {
      "id": "virtual: config-metas",
      "key": "metas",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-links": {
      "id": "virtual: config-links",
      "key": "links",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-historyWithQuery": {
      "id": "virtual: config-historyWithQuery",
      "key": "historyWithQuery",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-history": {
      "id": "virtual: config-history",
      "key": "history",
      "config": {
        "default": {
          "type": "browser"
        }
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-headScripts": {
      "id": "virtual: config-headScripts",
      "key": "headScripts",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-esbuildMinifyIIFE": {
      "id": "virtual: config-esbuildMinifyIIFE",
      "key": "esbuildMinifyIIFE",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-conventionRoutes": {
      "id": "virtual: config-conventionRoutes",
      "key": "conventionRoutes",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-conventionLayout": {
      "id": "virtual: config-conventionLayout",
      "key": "conventionLayout",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-base": {
      "id": "virtual: config-base",
      "key": "base",
      "config": {
        "default": "/"
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-analyze": {
      "id": "virtual: config-analyze",
      "key": "analyze",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-writeToDisk": {
      "id": "virtual: config-writeToDisk",
      "key": "writeToDisk",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-transformRuntime": {
      "id": "virtual: config-transformRuntime",
      "key": "transformRuntime",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-theme": {
      "id": "virtual: config-theme",
      "key": "theme",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-targets": {
      "id": "virtual: config-targets",
      "key": "targets",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-svgr": {
      "id": "virtual: config-svgr",
      "key": "svgr",
      "config": {
        "default": {}
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-svgo": {
      "id": "virtual: config-svgo",
      "key": "svgo",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-stylusLoader": {
      "id": "virtual: config-stylusLoader",
      "key": "stylusLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-styleLoader": {
      "id": "virtual: config-styleLoader",
      "key": "styleLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-srcTranspilerOptions": {
      "id": "virtual: config-srcTranspilerOptions",
      "key": "srcTranspilerOptions",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-srcTranspiler": {
      "id": "virtual: config-srcTranspiler",
      "key": "srcTranspiler",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-sassLoader": {
      "id": "virtual: config-sassLoader",
      "key": "sassLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-runtimePublicPath": {
      "id": "virtual: config-runtimePublicPath",
      "key": "runtimePublicPath",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-purgeCSS": {
      "id": "virtual: config-purgeCSS",
      "key": "purgeCSS",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-publicPath": {
      "id": "virtual: config-publicPath",
      "key": "publicPath",
      "config": {
        "default": "/"
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-proxy": {
      "id": "virtual: config-proxy",
      "key": "proxy",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-postcssLoader": {
      "id": "virtual: config-postcssLoader",
      "key": "postcssLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-outputPath": {
      "id": "virtual: config-outputPath",
      "key": "outputPath",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-normalCSSLoaderModules": {
      "id": "virtual: config-normalCSSLoaderModules",
      "key": "normalCSSLoaderModules",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-mfsu": {
      "id": "virtual: config-mfsu",
      "key": "mfsu",
      "config": {
        "default": {
          "strategy": "eager"
        }
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-mdx": {
      "id": "virtual: config-mdx",
      "key": "mdx",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-manifest": {
      "id": "virtual: config-manifest",
      "key": "manifest",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-lessLoader": {
      "id": "virtual: config-lessLoader",
      "key": "lessLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-jsMinifierOptions": {
      "id": "virtual: config-jsMinifierOptions",
      "key": "jsMinifierOptions",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-jsMinifier": {
      "id": "virtual: config-jsMinifier",
      "key": "jsMinifier",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-inlineLimit": {
      "id": "virtual: config-inlineLimit",
      "key": "inlineLimit",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-ignoreMomentLocale": {
      "id": "virtual: config-ignoreMomentLocale",
      "key": "ignoreMomentLocale",
      "config": {
        "default": true
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-https": {
      "id": "virtual: config-https",
      "key": "https",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-hash": {
      "id": "virtual: config-hash",
      "key": "hash",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-forkTSChecker": {
      "id": "virtual: config-forkTSChecker",
      "key": "forkTSChecker",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-fastRefresh": {
      "id": "virtual: config-fastRefresh",
      "key": "fastRefresh",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-extraPostCSSPlugins": {
      "id": "virtual: config-extraPostCSSPlugins",
      "key": "extraPostCSSPlugins",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-extraBabelPresets": {
      "id": "virtual: config-extraBabelPresets",
      "key": "extraBabelPresets",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-extraBabelPlugins": {
      "id": "virtual: config-extraBabelPlugins",
      "key": "extraBabelPlugins",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-extraBabelIncludes": {
      "id": "virtual: config-extraBabelIncludes",
      "key": "extraBabelIncludes",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-externals": {
      "id": "virtual: config-externals",
      "key": "externals",
      "config": {
        "default": {}
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-esm": {
      "id": "virtual: config-esm",
      "key": "esm",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-devtool": {
      "id": "virtual: config-devtool",
      "key": "devtool",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-depTranspiler": {
      "id": "virtual: config-depTranspiler",
      "key": "depTranspiler",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-define": {
      "id": "virtual: config-define",
      "key": "define",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-deadCode": {
      "id": "virtual: config-deadCode",
      "key": "deadCode",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cssPublicPath": {
      "id": "virtual: config-cssPublicPath",
      "key": "cssPublicPath",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cssMinifierOptions": {
      "id": "virtual: config-cssMinifierOptions",
      "key": "cssMinifierOptions",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cssMinifier": {
      "id": "virtual: config-cssMinifier",
      "key": "cssMinifier",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cssLoaderModules": {
      "id": "virtual: config-cssLoaderModules",
      "key": "cssLoaderModules",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cssLoader": {
      "id": "virtual: config-cssLoader",
      "key": "cssLoader",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-copy": {
      "id": "virtual: config-copy",
      "key": "copy",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-checkDepCssModules": {
      "id": "virtual: config-checkDepCssModules",
      "key": "checkDepCssModules",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-chainWebpack": {
      "id": "virtual: config-chainWebpack",
      "key": "chainWebpack",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-cacheDirectoryPath": {
      "id": "virtual: config-cacheDirectoryPath",
      "key": "cacheDirectoryPath",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-babelLoaderCustomize": {
      "id": "virtual: config-babelLoaderCustomize",
      "key": "babelLoaderCustomize",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-autoprefixer": {
      "id": "virtual: config-autoprefixer",
      "key": "autoprefixer",
      "config": {},
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-autoCSSModules": {
      "id": "virtual: config-autoCSSModules",
      "key": "autoCSSModules",
      "config": {
        "default": true
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "virtual: config-alias": {
      "id": "virtual: config-alias",
      "key": "alias",
      "config": {
        "default": {
          "umi": "@@/exports",
          "react": "/Users/yanfang/MOM/BDC/frontend/node_modules/react",
          "react-dom": "/Users/yanfang/MOM/BDC/frontend/node_modules/react-dom",
          "react-router": "/Users/yanfang/MOM/BDC/frontend/node_modules/react-router",
          "react-router-dom": "/Users/yanfang/MOM/BDC/frontend/node_modules/react-router-dom"
        }
      },
      "type": "plugin",
      "enableBy": "register",
      "time": {
        "hooks": {},
        "register": 0
      }
    },
    "./node_modules/@umijs/preset-umi/dist/features/crossorigin/crossorigin": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/crossorigin/crossorigin.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/crossorigin/crossorigin",
      "key": "crossorigin"
    },
    "./node_modules/@umijs/preset-umi/dist/features/depsOnDemand/depsOnDemand": {
      "config": {},
      "time": {
        "hooks": {
          "onStart": [
            0
          ]
        },
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/depsOnDemand/depsOnDemand.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/depsOnDemand/depsOnDemand",
      "key": "depsOnDemand"
    },
    "./node_modules/@umijs/preset-umi/dist/features/devTool/devTool": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/devTool/devTool.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/devTool/devTool",
      "key": "devTool"
    },
    "./node_modules/@umijs/preset-umi/dist/features/esbuildHelperChecker/esbuildHelperChecker": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 76
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/esbuildHelperChecker/esbuildHelperChecker.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/esbuildHelperChecker/esbuildHelperChecker",
      "key": "esbuildHelperChecker"
    },
    "./node_modules/@umijs/preset-umi/dist/features/esmi/esmi": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 62
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/esmi/esmi.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/esmi/esmi",
      "key": "esmi"
    },
    "./node_modules/@umijs/preset-umi/dist/features/exportStatic/exportStatic": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 12
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/exportStatic/exportStatic.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/exportStatic/exportStatic",
      "key": "exportStatic"
    },
    "./node_modules/@umijs/preset-umi/dist/features/favicons/favicons": {
      "config": {},
      "time": {
        "hooks": {
          "modifyAppData": [
            0
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/favicons/favicons.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/favicons/favicons",
      "key": "favicons"
    },
    "./node_modules/@umijs/preset-umi/dist/features/helmet/helmet": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/helmet/helmet.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/helmet/helmet",
      "key": "helmet"
    },
    "./node_modules/@umijs/preset-umi/dist/features/icons/icons": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/icons/icons.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/icons/icons",
      "key": "icons"
    },
    "./node_modules/@umijs/preset-umi/dist/features/mock/mock": {
      "config": {},
      "time": {
        "hooks": {
          "onStart": [
            0
          ]
        },
        "register": 22
      },
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/mock/mock.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/mock/mock",
      "key": "mock"
    },
    "./node_modules/@umijs/preset-umi/dist/features/mpa/mpa": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/mpa/mpa.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/mpa/mpa",
      "key": "mpa"
    },
    "./node_modules/@umijs/preset-umi/dist/features/okam/okam": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/okam/okam.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/okam/okam",
      "key": "okam"
    },
    "./node_modules/@umijs/preset-umi/dist/features/overrides/overrides": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/overrides/overrides.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/overrides/overrides",
      "key": "overrides"
    },
    "./node_modules/@umijs/preset-umi/dist/features/phantomDependency/phantomDependency": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/phantomDependency/phantomDependency.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/phantomDependency/phantomDependency",
      "key": "phantomDependency"
    },
    "./node_modules/@umijs/preset-umi/dist/features/polyfill/polyfill": {
      "config": {},
      "time": {
        "hooks": {
          "modifyConfig": [
            1
          ]
        },
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/polyfill/polyfill.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/polyfill/polyfill",
      "key": "polyfill"
    },
    "./node_modules/@umijs/preset-umi/dist/features/polyfill/publicPathPolyfill": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/polyfill/publicPathPolyfill.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/polyfill/publicPathPolyfill",
      "key": "publicPathPolyfill"
    },
    "./node_modules/@umijs/preset-umi/dist/features/prepare/prepare": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/prepare/prepare.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/prepare/prepare",
      "key": "prepare"
    },
    "./node_modules/@umijs/preset-umi/dist/features/routePrefetch/routePrefetch": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/routePrefetch/routePrefetch.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/routePrefetch/routePrefetch",
      "key": "routePrefetch"
    },
    "./node_modules/@umijs/preset-umi/dist/features/terminal/terminal": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/terminal/terminal.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/terminal/terminal",
      "key": "terminal"
    },
    "./node_modules/@umijs/preset-umi/dist/features/tmpFiles/tmpFiles": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/tmpFiles/tmpFiles.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/tmpFiles/tmpFiles",
      "key": "tmpFiles"
    },
    "./node_modules/@umijs/preset-umi/dist/features/clientLoader/clientLoader": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/clientLoader/clientLoader.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/clientLoader/clientLoader",
      "key": "clientLoader"
    },
    "./node_modules/@umijs/preset-umi/dist/features/routeProps/routeProps": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/routeProps/routeProps.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/routeProps/routeProps",
      "key": "routeProps"
    },
    "./node_modules/@umijs/preset-umi/dist/features/ssr/ssr": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/ssr/ssr.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/ssr/ssr",
      "key": "ssr"
    },
    "./node_modules/@umijs/preset-umi/dist/features/tmpFiles/configTypes": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/tmpFiles/configTypes.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/tmpFiles/configTypes",
      "key": "configTypes"
    },
    "./node_modules/@umijs/preset-umi/dist/features/transform/transform": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/transform/transform.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/transform/transform",
      "key": "transform"
    },
    "./node_modules/@umijs/preset-umi/dist/features/lowImport/lowImport": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/lowImport/lowImport.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/lowImport/lowImport",
      "key": "lowImport"
    },
    "./node_modules/@umijs/preset-umi/dist/features/vite/vite": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/vite/vite.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/vite/vite",
      "key": "vite"
    },
    "./node_modules/@umijs/preset-umi/dist/features/apiRoute/apiRoute": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 3
      },
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/apiRoute/apiRoute.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/apiRoute/apiRoute",
      "key": "apiRoute"
    },
    "./node_modules/@umijs/preset-umi/dist/features/monorepo/redirect": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 13
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/monorepo/redirect.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/monorepo/redirect",
      "key": "monorepoRedirect"
    },
    "./node_modules/@umijs/preset-umi/dist/features/test/test": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/test/test.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/test/test",
      "key": "test"
    },
    "./node_modules/@umijs/preset-umi/dist/features/clickToComponent/clickToComponent": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/clickToComponent/clickToComponent.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/clickToComponent/clickToComponent",
      "key": "clickToComponent"
    },
    "./node_modules/@umijs/preset-umi/dist/features/legacy/legacy": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/legacy/legacy.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/legacy/legacy",
      "key": "legacy"
    },
    "./node_modules/@umijs/preset-umi/dist/features/classPropertiesLoose/classPropertiesLoose": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/classPropertiesLoose/classPropertiesLoose.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/classPropertiesLoose/classPropertiesLoose",
      "key": "classPropertiesLoose"
    },
    "./node_modules/@umijs/preset-umi/dist/features/webpack/webpack": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/webpack/webpack.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/webpack/webpack",
      "key": "preset-umi:webpack"
    },
    "./node_modules/@umijs/preset-umi/dist/features/swc/swc": {
      "config": {},
      "time": {
        "hooks": {
          "addOnDemandDeps": [
            0
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/swc/swc.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/swc/swc",
      "key": "swc"
    },
    "./node_modules/@umijs/preset-umi/dist/features/ui/ui": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 2
      },
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/ui/ui.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/ui/ui",
      "key": "ui"
    },
    "./node_modules/@umijs/preset-umi/dist/features/mako/mako": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/mako/mako.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/mako/mako",
      "key": "mako"
    },
    "./node_modules/@umijs/preset-umi/dist/features/hmrGuardian/hmrGuardian": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/hmrGuardian/hmrGuardian.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/hmrGuardian/hmrGuardian",
      "key": "hmrGuardian"
    },
    "./node_modules/@umijs/preset-umi/dist/features/routePreloadOnLoad/routePreloadOnLoad": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/routePreloadOnLoad/routePreloadOnLoad.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/routePreloadOnLoad/routePreloadOnLoad",
      "key": "routePreloadOnLoad"
    },
    "./node_modules/@umijs/preset-umi/dist/features/forget/forget": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/forget/forget.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/forget/forget",
      "key": "forget"
    },
    "./node_modules/@umijs/preset-umi/dist/features/bundler/bundler": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/features/bundler/bundler.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/features/bundler/bundler",
      "key": "preset-umi:bundler"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/build": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/build.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/build",
      "key": "build"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/config/config": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 21
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/config/config.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/config/config",
      "key": "config"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/dev/dev": {
      "config": {},
      "time": {
        "hooks": {
          "modifyAppData": [
            7
          ],
          "onStart": [
            0
          ]
        },
        "register": 35
      },
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/dev/dev.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/dev/dev",
      "key": "dev"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/help": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/help.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/help",
      "key": "help"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/lint": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/lint.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/lint",
      "key": "lint"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/setup": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/setup.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/setup",
      "key": "setup"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/deadcode": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/deadcode.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/deadcode",
      "key": "deadcode"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/version": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/version.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/version",
      "key": "version"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/generators/page": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/generators/page.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/generators/page",
      "key": "generator:page"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/generators/prettier": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/generators/prettier.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/generators/prettier",
      "key": "generator:prettier"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/generators/tsconfig": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/generators/tsconfig.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/generators/tsconfig",
      "key": "generator:tsconfig"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/generators/jest": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/generators/jest.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/generators/jest",
      "key": "generator:jest"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/generators/tailwindcss": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/generators/tailwindcss.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/generators/tailwindcss",
      "key": "generator:tailwindcss"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/generators/dva": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/generators/dva.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/generators/dva",
      "key": "generator:dva"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/generators/component": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/generators/component.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/generators/component",
      "key": "generator:component"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/generators/mock": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/generators/mock.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/generators/mock",
      "key": "generator:mock"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/generators/cypress": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/generators/cypress.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/generators/cypress",
      "key": "generator:cypress"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/generators/api": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/generators/api.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/generators/api",
      "key": "generator:api"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/generators/precommit": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/generators/precommit.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/generators/precommit",
      "key": "generator:precommit"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/plugin": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/plugin.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/plugin",
      "key": "command:plugin"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/verify-commit": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/verify-commit.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/verify-commit",
      "key": "verifyCommit"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/preview": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 13
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/preview.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/preview",
      "key": "preview"
    },
    "./node_modules/@umijs/preset-umi/dist/commands/mfsu/mfsu": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/preset-umi/dist/commands/mfsu/mfsu.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/preset-umi/dist/commands/mfsu/mfsu",
      "key": "mfsu-cli"
    },
    "@umijs/plugin-run": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugin-run/dist/index.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "@umijs/plugin-run",
      "key": "run"
    },
    "./node_modules/@umijs/plugins/dist/access": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/access.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/access",
      "key": "access"
    },
    "./node_modules/@umijs/plugins/dist/analytics": {
      "config": {
        "onChange": "reload"
      },
      "time": {
        "hooks": {},
        "register": 0
      },
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/analytics.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/analytics",
      "key": "analytics"
    },
    "./node_modules/@umijs/plugins/dist/antd": {
      "config": {},
      "time": {
        "hooks": {
          "modifyConfig": [
            3
          ],
          "modifyAppData": [
            0
          ]
        },
        "register": 3
      },
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/antd.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/antd",
      "key": "antd"
    },
    "./node_modules/@umijs/plugins/dist/dva": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 3
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/dva.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/dva",
      "key": "dva"
    },
    "./node_modules/@umijs/plugins/dist/initial-state": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/initial-state.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/initial-state",
      "key": "initialState"
    },
    "./node_modules/@umijs/plugins/dist/layout": {
      "config": {
        "onChange": "regenerateTmpFiles"
      },
      "time": {
        "hooks": {
          "modifyConfig": [
            0
          ],
          "addLayouts": [
            0
          ],
          "modifyAppData": [
            0
          ]
        },
        "register": 2
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/layout.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/layout",
      "key": "layout"
    },
    "./node_modules/@umijs/plugins/dist/locale": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/locale.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/locale",
      "key": "locale"
    },
    "./node_modules/@umijs/plugins/dist/mf": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/mf.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/mf",
      "key": "mf"
    },
    "./node_modules/@umijs/plugins/dist/model": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/model.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/model",
      "key": "model"
    },
    "./node_modules/@umijs/plugins/dist/moment2dayjs": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/moment2dayjs.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/moment2dayjs",
      "key": "moment2dayjs"
    },
    "./node_modules/@umijs/plugins/dist/qiankun": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/qiankun.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/qiankun",
      "key": "qiankun"
    },
    "./node_modules/@umijs/plugins/dist/qiankun/master": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/qiankun/master.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/qiankun/master",
      "key": "qiankun-master"
    },
    "./node_modules/@umijs/plugins/dist/qiankun/slave": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/qiankun/slave.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/qiankun/slave",
      "key": "qiankun-slave"
    },
    "./node_modules/@umijs/plugins/dist/react-query": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/react-query.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/react-query",
      "key": "reactQuery"
    },
    "./node_modules/@umijs/plugins/dist/request": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/request.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/request",
      "key": "request"
    },
    "./node_modules/@umijs/plugins/dist/styled-components": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/styled-components.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/styled-components",
      "key": "styledComponents"
    },
    "./node_modules/@umijs/plugins/dist/tailwindcss": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/tailwindcss.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/tailwindcss",
      "key": "tailwindcss"
    },
    "./node_modules/@umijs/plugins/dist/valtio": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 0
      },
      "enableBy": "config",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/plugins/dist/valtio.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/plugins/dist/valtio",
      "key": "valtio"
    },
    "./node_modules/@umijs/max/dist/plugins/maxAlias": {
      "config": {},
      "time": {
        "hooks": {
          "modifyConfig": [
            0
          ]
        },
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/max/dist/plugins/maxAlias.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/max/dist/plugins/maxAlias",
      "key": "maxAlias"
    },
    "./node_modules/@umijs/max/dist/plugins/maxAppData": {
      "config": {},
      "time": {
        "hooks": {
          "modifyAppData": [
            0
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/max/dist/plugins/maxAppData.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/max/dist/plugins/maxAppData",
      "key": "maxAppData"
    },
    "./node_modules/@umijs/max/dist/plugins/maxChecker": {
      "config": {},
      "time": {
        "hooks": {
          "onCheckPkgJSON": [
            0
          ]
        },
        "register": 0
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/max/dist/plugins/maxChecker.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/max/dist/plugins/maxChecker",
      "key": "maxChecker"
    },
    "./node_modules/@umijs/core/dist/service/generatePlugin": {
      "config": {},
      "time": {
        "hooks": {},
        "register": 1
      },
      "enableBy": "register",
      "type": "plugin",
      "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/@umijs/core/dist/service/generatePlugin.js",
      "cwd": "/Users/yanfang/MOM/BDC/frontend",
      "id": "./node_modules/@umijs/core/dist/service/generatePlugin",
      "key": "generatePlugin"
    }
  },
  "presets": [],
  "name": "dev",
  "args": {
    "_": []
  },
  "userConfig": {
    "outputPath": "dist",
    "hash": true,
    "antd": {
      "dark": true
    },
    "access": {},
    "model": {},
    "initialState": {},
    "request": {},
    "layout": {
      "locale": false,
      "title": "BDC3",
      "logo": "/logo.svg",
      "layout": "top",
      "fixedHeader": true
    },
    "proxy": {
      "/api": {
        "target": "http://localhost:3300",
        "changeOrigin": true
      }
    },
    "routes": [
      {
        "path": "/",
        "redirect": "/data-structures"
      },
      {
        "path": "/sso-success",
        "name": "SSO 成功",
        "component": "./SSOSuccess",
        "hideInMenu": true,
        "layout": false
      },
      {
        "path": "/test-auth",
        "name": "认证测试",
        "component": "./test-auth",
        "hideInMenu": true
      },
      {
        "path": "/data-structures",
        "name": "数据结构管理",
        "icon": "BlockOutlined",
        "component": "./SchemaManagement"
      },
      {
        "path": "/database-management",
        "name": "数据库管理",
        "icon": "DatabaseOutlined",
        "component": "./DatabaseManagement"
      },
      {
        "path": "/schema-graph",
        "name": "数据表图谱",
        "component": "./SchemaGraph",
        "hideInMenu": true
      }
    ],
    "npmClient": "yarn"
  },
  "mainConfigFile": "/Users/yanfang/MOM/BDC/frontend/.umirc.ts",
  "config": {
    "routeLoader": {
      "moduleType": "esm"
    },
    "mountElementId": "root",
    "history": {
      "type": "browser"
    },
    "base": "/",
    "svgr": {},
    "publicPath": "/",
    "mfsu": {
      "strategy": "eager"
    },
    "ignoreMomentLocale": true,
    "externals": {},
    "autoCSSModules": true,
    "alias": {
      "umi": "@@/exports",
      "react": "/Users/yanfang/MOM/BDC/frontend/node_modules/react",
      "react-dom": "/Users/yanfang/MOM/BDC/frontend/node_modules/react-dom",
      "react-router": "/Users/yanfang/MOM/BDC/frontend/node_modules/react-router",
      "react-router-dom": "/Users/yanfang/MOM/BDC/frontend/node_modules/react-router-dom",
      "@": "/Users/yanfang/MOM/BDC/frontend/src",
      "@@": "/Users/yanfang/MOM/BDC/frontend/src/.umi",
      "regenerator-runtime": "/Users/yanfang/MOM/BDC/frontend/node_modules/regenerator-runtime",
      "antd": "/Users/yanfang/MOM/BDC/frontend/node_modules/antd",
      "@umijs/max": "@@/exports"
    },
    "outputPath": "dist",
    "hash": true,
    "antd": {
      "dark": true,
      "configProvider": {}
    },
    "access": {},
    "model": {},
    "initialState": {},
    "request": {},
    "layout": {
      "locale": false,
      "title": "BDC3",
      "logo": "/logo.svg",
      "layout": "top",
      "fixedHeader": true
    },
    "proxy": {
      "/api": {
        "target": "http://localhost:3300",
        "changeOrigin": true
      }
    },
    "routes": [
      {
        "path": "/",
        "redirect": "/data-structures"
      },
      {
        "path": "/sso-success",
        "name": "SSO 成功",
        "component": "./SSOSuccess",
        "hideInMenu": true,
        "layout": false
      },
      {
        "path": "/test-auth",
        "name": "认证测试",
        "component": "./test-auth",
        "hideInMenu": true
      },
      {
        "path": "/data-structures",
        "name": "数据结构管理",
        "icon": "BlockOutlined",
        "component": "./SchemaManagement"
      },
      {
        "path": "/database-management",
        "name": "数据库管理",
        "icon": "DatabaseOutlined",
        "component": "./DatabaseManagement"
      },
      {
        "path": "/schema-graph",
        "name": "数据表图谱",
        "component": "./SchemaGraph",
        "hideInMenu": true
      }
    ],
    "npmClient": "yarn",
    "targets": {
      "chrome": 80
    },
    "theme": {
      "blue-base": "#1890ff",
      "blue-1": "#e6f7ff",
      "blue-2": "#bae7ff",
      "blue-3": "#91d5ff",
      "blue-4": "#69c0ff",
      "blue-5": "#40a9ff",
      "blue-6": "#1890ff",
      "blue-7": "#096dd9",
      "blue-8": "#0050b3",
      "blue-9": "#003a8c",
      "blue-10": "#002766",
      "purple-base": "#722ed1",
      "purple-1": "#f9f0ff",
      "purple-2": "#efdbff",
      "purple-3": "#d3adf7",
      "purple-4": "#b37feb",
      "purple-5": "#9254de",
      "purple-6": "#722ed1",
      "purple-7": "#531dab",
      "purple-8": "#391085",
      "purple-9": "#22075e",
      "purple-10": "#120338",
      "cyan-base": "#13c2c2",
      "cyan-1": "#e6fffb",
      "cyan-2": "#b5f5ec",
      "cyan-3": "#87e8de",
      "cyan-4": "#5cdbd3",
      "cyan-5": "#36cfc9",
      "cyan-6": "#13c2c2",
      "cyan-7": "#08979c",
      "cyan-8": "#006d75",
      "cyan-9": "#00474f",
      "cyan-10": "#002329",
      "green-base": "#52c41a",
      "green-1": "#f6ffed",
      "green-2": "#d9f7be",
      "green-3": "#b7eb8f",
      "green-4": "#95de64",
      "green-5": "#73d13d",
      "green-6": "#52c41a",
      "green-7": "#389e0d",
      "green-8": "#237804",
      "green-9": "#135200",
      "green-10": "#092b00",
      "magenta-base": "#eb2f96",
      "magenta-1": "#fff0f6",
      "magenta-2": "#ffd6e7",
      "magenta-3": "#ffadd2",
      "magenta-4": "#ff85c0",
      "magenta-5": "#f759ab",
      "magenta-6": "#eb2f96",
      "magenta-7": "#c41d7f",
      "magenta-8": "#9e1068",
      "magenta-9": "#780650",
      "magenta-10": "#520339",
      "pink-base": "#eb2f96",
      "pink-1": "#fff0f6",
      "pink-2": "#ffd6e7",
      "pink-3": "#ffadd2",
      "pink-4": "#ff85c0",
      "pink-5": "#f759ab",
      "pink-6": "#eb2f96",
      "pink-7": "#c41d7f",
      "pink-8": "#9e1068",
      "pink-9": "#780650",
      "pink-10": "#520339",
      "red-base": "#f5222d",
      "red-1": "#fff1f0",
      "red-2": "#ffccc7",
      "red-3": "#ffa39e",
      "red-4": "#ff7875",
      "red-5": "#ff4d4f",
      "red-6": "#f5222d",
      "red-7": "#cf1322",
      "red-8": "#a8071a",
      "red-9": "#820014",
      "red-10": "#5c0011",
      "orange-base": "#fa8c16",
      "orange-1": "#fff7e6",
      "orange-2": "#ffe7ba",
      "orange-3": "#ffd591",
      "orange-4": "#ffc069",
      "orange-5": "#ffa940",
      "orange-6": "#fa8c16",
      "orange-7": "#d46b08",
      "orange-8": "#ad4e00",
      "orange-9": "#873800",
      "orange-10": "#612500",
      "yellow-base": "#fadb14",
      "yellow-1": "#feffe6",
      "yellow-2": "#ffffb8",
      "yellow-3": "#fffb8f",
      "yellow-4": "#fff566",
      "yellow-5": "#ffec3d",
      "yellow-6": "#fadb14",
      "yellow-7": "#d4b106",
      "yellow-8": "#ad8b00",
      "yellow-9": "#876800",
      "yellow-10": "#614700",
      "volcano-base": "#fa541c",
      "volcano-1": "#fff2e8",
      "volcano-2": "#ffd8bf",
      "volcano-3": "#ffbb96",
      "volcano-4": "#ff9c6e",
      "volcano-5": "#ff7a45",
      "volcano-6": "#fa541c",
      "volcano-7": "#d4380d",
      "volcano-8": "#ad2102",
      "volcano-9": "#871400",
      "volcano-10": "#610b00",
      "geekblue-base": "#2f54eb",
      "geekblue-1": "#f0f5ff",
      "geekblue-2": "#d6e4ff",
      "geekblue-3": "#adc6ff",
      "geekblue-4": "#85a5ff",
      "geekblue-5": "#597ef7",
      "geekblue-6": "#2f54eb",
      "geekblue-7": "#1d39c4",
      "geekblue-8": "#10239e",
      "geekblue-9": "#061178",
      "geekblue-10": "#030852",
      "lime-base": "#a0d911",
      "lime-1": "#fcffe6",
      "lime-2": "#f4ffb8",
      "lime-3": "#eaff8f",
      "lime-4": "#d3f261",
      "lime-5": "#bae637",
      "lime-6": "#a0d911",
      "lime-7": "#7cb305",
      "lime-8": "#5b8c00",
      "lime-9": "#3f6600",
      "lime-10": "#254000",
      "gold-base": "#faad14",
      "gold-1": "#fffbe6",
      "gold-2": "#fff1b8",
      "gold-3": "#ffe58f",
      "gold-4": "#ffd666",
      "gold-5": "#ffc53d",
      "gold-6": "#faad14",
      "gold-7": "#d48806",
      "gold-8": "#ad6800",
      "gold-9": "#874d00",
      "gold-10": "#613400",
      "preset-colors": "pink, magenta, red, volcano, orange, yellow, gold, cyan, lime, green, blue, geekblue,",
      "theme": "default",
      "ant-prefix": "ant",
      "html-selector": "html",
      "primary-color": "#1890ff",
      "primary-color-hover": "#40a9ff",
      "primary-color-active": "#096dd9",
      "primary-color-outline": "rgba(24, 144, 255, 0.2)",
      "processing-color": "#1890ff",
      "info-color": "#1890ff",
      "info-color-deprecated-bg": "#e6f7ff",
      "info-color-deprecated-border": "#91d5ff",
      "success-color": "#52c41a",
      "success-color-hover": "#73d13d",
      "success-color-active": "#389e0d",
      "success-color-outline": "rgba(82, 196, 26, 0.2)",
      "success-color-deprecated-bg": "#f6ffed",
      "success-color-deprecated-border": "#b7eb8f",
      "warning-color": "#faad14",
      "warning-color-hover": "#ffc53d",
      "warning-color-active": "#d48806",
      "warning-color-outline": "rgba(250, 173, 20, 0.2)",
      "warning-color-deprecated-bg": "#fffbe6",
      "warning-color-deprecated-border": "#ffe58f",
      "error-color": "#ff4d4f",
      "error-color-hover": "#ff7875",
      "error-color-active": "#d9363e",
      "error-color-outline": "rgba(255, 77, 79, 0.2)",
      "error-color-deprecated-bg": "#fff2f0",
      "error-color-deprecated-border": "#ffccc7",
      "highlight-color": "#ff4d4f",
      "normal-color": "#d9d9d9",
      "white": "#fff",
      "black": "#000",
      "primary-1": "#e6f7ff",
      "primary-2": "#bae7ff",
      "primary-3": "#91d5ff",
      "primary-4": "#69c0ff",
      "primary-5": "#40a9ff",
      "primary-6": "#1890ff",
      "primary-7": "#096dd9",
      "primary-8": "#0050b3",
      "primary-9": "#003a8c",
      "primary-10": "#002766",
      "component-background": "#fff",
      "popover-background": "#fff",
      "popover-customize-border-color": "#f0f0f0",
      "font-family": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "code-family": "'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace",
      "text-color": "rgba(0, 0, 0, 0.85)",
      "text-color-secondary": "rgba(0, 0, 0, 0.45)",
      "text-color-inverse": "#fff",
      "icon-color": "inherit",
      "icon-color-hover": "rgba(0, 0, 0, 0.75)",
      "heading-color": "rgba(0, 0, 0, 0.85)",
      "text-color-dark": "rgba(255, 255, 255, 0.85)",
      "text-color-secondary-dark": "rgba(255, 255, 255, 0.65)",
      "text-selection-bg": "#1890ff",
      "font-variant-base": "tabular-nums",
      "font-feature-settings-base": "tnum",
      "font-size-base": "14px",
      "font-size-lg": "16px",
      "font-size-sm": "12px",
      "heading-1-size": "38px",
      "heading-2-size": "30px",
      "heading-3-size": "24px",
      "heading-4-size": "20px",
      "heading-5-size": "16px",
      "line-height-base": "1.5715",
      "border-radius-base": "2px",
      "border-radius-sm": "2px",
      "control-border-radius": "2px",
      "arrow-border-radius": "2px",
      "padding-lg": "24px",
      "padding-md": "16px",
      "padding-sm": "12px",
      "padding-xs": "8px",
      "padding-xss": "4px",
      "control-padding-horizontal": "12px",
      "control-padding-horizontal-sm": "8px",
      "margin-lg": "24px",
      "margin-md": "16px",
      "margin-sm": "12px",
      "margin-xs": "8px",
      "margin-xss": "4px",
      "height-base": "32px",
      "height-lg": "40px",
      "height-sm": "24px",
      "item-active-bg": "#e6f7ff",
      "item-hover-bg": "#f5f5f5",
      "iconfont-css-prefix": "anticon",
      "link-color": "#1890ff",
      "link-hover-color": "#40a9ff",
      "link-active-color": "#096dd9",
      "link-decoration": "none",
      "link-hover-decoration": "none",
      "link-focus-decoration": "none",
      "link-focus-outline": "0",
      "ease-base-out": "cubic-bezier(0.7, 0.3, 0.1, 1)",
      "ease-base-in": "cubic-bezier(0.9, 0, 0.3, 0.7)",
      "ease-out": "cubic-bezier(0.215, 0.61, 0.355, 1)",
      "ease-in": "cubic-bezier(0.55, 0.055, 0.675, 0.19)",
      "ease-in-out": "cubic-bezier(0.645, 0.045, 0.355, 1)",
      "ease-out-back": "cubic-bezier(0.12, 0.4, 0.29, 1.46)",
      "ease-in-back": "cubic-bezier(0.71, -0.46, 0.88, 0.6)",
      "ease-in-out-back": "cubic-bezier(0.71, -0.46, 0.29, 1.46)",
      "ease-out-circ": "cubic-bezier(0.08, 0.82, 0.17, 1)",
      "ease-in-circ": "cubic-bezier(0.6, 0.04, 0.98, 0.34)",
      "ease-in-out-circ": "cubic-bezier(0.78, 0.14, 0.15, 0.86)",
      "ease-out-quint": "cubic-bezier(0.23, 1, 0.32, 1)",
      "ease-in-quint": "cubic-bezier(0.755, 0.05, 0.855, 0.06)",
      "ease-in-out-quint": "cubic-bezier(0.86, 0, 0.07, 1)",
      "border-color-base": "#d9d9d9",
      "border-color-split": "#f0f0f0",
      "border-color-inverse": "#fff",
      "border-width-base": "1px",
      "border-style-base": "solid",
      "outline-blur-size": "0",
      "outline-width": "2px",
      "outline-color": "#1890ff",
      "outline-fade": "20%",
      "background-color-light": "#fafafa",
      "background-color-base": "#f5f5f5",
      "disabled-color": "rgba(0, 0, 0, 0.25)",
      "disabled-bg": "#f5f5f5",
      "disabled-active-bg": "#e6e6e6",
      "disabled-color-dark": "rgba(255, 255, 255, 0.35)",
      "shadow-color": "rgba(0, 0, 0, 0.15)",
      "shadow-color-inverse": "#fff",
      "box-shadow-base": "0 3px 6px -4px rgba(0, 0, 0, 0.12), 0 6px 16px 0 rgba(0, 0, 0, 0.08), 0 9px 28px 8px rgba(0, 0, 0, 0.05)",
      "shadow-1-up": "0 -6px 16px -8px rgba(0, 0, 0, 0.08), 0 -9px 28px 0 rgba(0, 0, 0, 0.05), 0 -12px 48px 16px rgba(0, 0, 0, 0.03)",
      "shadow-1-down": "0 6px 16px -8px rgba(0, 0, 0, 0.08), 0 9px 28px 0 rgba(0, 0, 0, 0.05), 0 12px 48px 16px rgba(0, 0, 0, 0.03)",
      "shadow-1-left": "-6px 0 16px -8px rgba(0, 0, 0, 0.08), -9px 0 28px 0 rgba(0, 0, 0, 0.05), -12px 0 48px 16px rgba(0, 0, 0, 0.03)",
      "shadow-1-right": "6px 0 16px -8px rgba(0, 0, 0, 0.08), 9px 0 28px 0 rgba(0, 0, 0, 0.05), 12px 0 48px 16px rgba(0, 0, 0, 0.03)",
      "shadow-2": "0 3px 6px -4px rgba(0, 0, 0, 0.12), 0 6px 16px 0 rgba(0, 0, 0, 0.08), 0 9px 28px 8px rgba(0, 0, 0, 0.05)",
      "btn-font-weight": "400",
      "btn-border-radius-base": "2px",
      "btn-border-radius-sm": "2px",
      "btn-border-width": "1px",
      "btn-border-style": "solid",
      "btn-shadow": "0 2px 0 rgba(0, 0, 0, 0.015)",
      "btn-primary-shadow": "0 2px 0 rgba(0, 0, 0, 0.045)",
      "btn-text-shadow": "0 -1px 0 rgba(0, 0, 0, 0.12)",
      "btn-primary-color": "#fff",
      "btn-primary-bg": "#1890ff",
      "btn-default-color": "rgba(0, 0, 0, 0.85)",
      "btn-default-bg": "#fff",
      "btn-default-border": "#d9d9d9",
      "btn-danger-color": "#fff",
      "btn-danger-bg": "#ff4d4f",
      "btn-danger-border": "#ff4d4f",
      "btn-disable-color": "rgba(0, 0, 0, 0.25)",
      "btn-disable-bg": "#f5f5f5",
      "btn-disable-border": "#d9d9d9",
      "btn-default-ghost-color": "#fff",
      "btn-default-ghost-bg": "transparent",
      "btn-default-ghost-border": "#fff",
      "btn-font-size-lg": "16px",
      "btn-font-size-sm": "14px",
      "btn-padding-horizontal-base": "15px",
      "btn-padding-horizontal-lg": "15px",
      "btn-padding-horizontal-sm": "7px",
      "btn-height-base": "32px",
      "btn-height-lg": "40px",
      "btn-height-sm": "24px",
      "btn-line-height": "1.5715",
      "btn-circle-size": "32px",
      "btn-circle-size-lg": "40px",
      "btn-circle-size-sm": "24px",
      "btn-square-size": "32px",
      "btn-square-size-lg": "40px",
      "btn-square-size-sm": "24px",
      "btn-square-only-icon-size": "16px",
      "btn-square-only-icon-size-sm": "14px",
      "btn-square-only-icon-size-lg": "18px",
      "btn-group-border": "#40a9ff",
      "btn-link-hover-bg": "transparent",
      "btn-text-hover-bg": "rgba(0, 0, 0, 0.018)",
      "checkbox-size": "16px",
      "checkbox-color": "#1890ff",
      "checkbox-check-color": "#fff",
      "checkbox-check-bg": "#fff",
      "checkbox-border-width": "1px",
      "checkbox-border-radius": "2px",
      "checkbox-group-item-margin-right": "8px",
      "descriptions-bg": "#fafafa",
      "descriptions-title-margin-bottom": "20px",
      "descriptions-default-padding": "16px 24px",
      "descriptions-middle-padding": "12px 24px",
      "descriptions-small-padding": "8px 16px",
      "descriptions-item-padding-bottom": "16px",
      "descriptions-item-trailing-colon": "true",
      "descriptions-item-label-colon-margin-right": "8px",
      "descriptions-item-label-colon-margin-left": "2px",
      "descriptions-extra-color": "rgba(0, 0, 0, 0.85)",
      "divider-text-padding": "1em",
      "divider-orientation-margin": "5%",
      "divider-color": "rgba(0, 0, 0, 0.06)",
      "divider-vertical-gutter": "8px",
      "dropdown-selected-color": "#1890ff",
      "dropdown-menu-submenu-disabled-bg": "#fff",
      "dropdown-selected-bg": "#e6f7ff",
      "empty-font-size": "14px",
      "radio-size": "16px",
      "radio-top": "0.2em",
      "radio-border-width": "1px",
      "radio-dot-size": "8px",
      "radio-dot-color": "#1890ff",
      "radio-dot-disabled-color": "rgba(0, 0, 0, 0.2)",
      "radio-solid-checked-color": "#fff",
      "radio-button-bg": "#fff",
      "radio-button-checked-bg": "#fff",
      "radio-button-color": "rgba(0, 0, 0, 0.85)",
      "radio-button-hover-color": "#40a9ff",
      "radio-button-active-color": "#096dd9",
      "radio-button-padding-horizontal": "15px",
      "radio-disabled-button-checked-bg": "#e6e6e6",
      "radio-disabled-button-checked-color": "rgba(0, 0, 0, 0.25)",
      "radio-wrapper-margin-right": "8px",
      "screen-xs": "480px",
      "screen-xs-min": "480px",
      "screen-sm": "576px",
      "screen-sm-min": "576px",
      "screen-md": "768px",
      "screen-md-min": "768px",
      "screen-lg": "992px",
      "screen-lg-min": "992px",
      "screen-xl": "1200px",
      "screen-xl-min": "1200px",
      "screen-xxl": "1600px",
      "screen-xxl-min": "1600px",
      "screen-xs-max": "575px",
      "screen-sm-max": "767px",
      "screen-md-max": "991px",
      "screen-lg-max": "1199px",
      "screen-xl-max": "1599px",
      "grid-columns": "24",
      "layout-header-background": "#001529",
      "layout-header-height": "64px",
      "layout-header-padding": "0 50px",
      "layout-header-color": "rgba(0, 0, 0, 0.85)",
      "layout-footer-padding": "24px 50px",
      "layout-footer-background": "#f0f2f5",
      "layout-sider-background": "#001529",
      "layout-trigger-height": "48px",
      "layout-trigger-background": "#002140",
      "layout-trigger-color": "#fff",
      "layout-zero-trigger-width": "36px",
      "layout-zero-trigger-height": "42px",
      "layout-sider-background-light": "#fff",
      "layout-trigger-background-light": "#fff",
      "layout-trigger-color-light": "rgba(0, 0, 0, 0.85)",
      "zindex-badge": "auto",
      "zindex-table-fixed": "2",
      "zindex-affix": "10",
      "zindex-back-top": "10",
      "zindex-picker-panel": "10",
      "zindex-popup-close": "10",
      "zindex-modal": "1000",
      "zindex-modal-mask": "1000",
      "zindex-message": "1010",
      "zindex-notification": "1010",
      "zindex-popover": "1030",
      "zindex-dropdown": "1050",
      "zindex-picker": "1050",
      "zindex-popoconfirm": "1060",
      "zindex-tooltip": "1070",
      "zindex-image": "1080",
      "animation-duration-slow": "0.3s",
      "animation-duration-base": "0.2s",
      "animation-duration-fast": "0.1s",
      "collapse-panel-border-radius": "2px",
      "dropdown-menu-bg": "#fff",
      "dropdown-vertical-padding": "5px",
      "dropdown-edge-child-vertical-padding": "4px",
      "dropdown-font-size": "14px",
      "dropdown-line-height": "22px",
      "label-required-color": "#ff4d4f",
      "label-color": "rgba(0, 0, 0, 0.85)",
      "form-warning-input-bg": "#fff",
      "form-item-margin-bottom": "24px",
      "form-item-trailing-colon": "true",
      "form-vertical-label-padding": "0 0 8px",
      "form-vertical-label-margin": "0",
      "form-item-label-font-size": "14px",
      "form-item-label-height": "32px",
      "form-item-label-colon-margin-right": "8px",
      "form-item-label-colon-margin-left": "2px",
      "form-error-input-bg": "#fff",
      "input-height-base": "32px",
      "input-height-lg": "40px",
      "input-height-sm": "24px",
      "input-padding-horizontal": "11px",
      "input-padding-horizontal-base": "11px",
      "input-padding-horizontal-sm": "7px",
      "input-padding-horizontal-lg": "11px",
      "input-padding-vertical-base": "4px",
      "input-padding-vertical-sm": "0px",
      "input-padding-vertical-lg": "6.5px",
      "input-placeholder-color": "#bfbfbf",
      "input-color": "rgba(0, 0, 0, 0.85)",
      "input-icon-color": "rgba(0, 0, 0, 0.85)",
      "input-border-color": "#d9d9d9",
      "input-bg": "#fff",
      "input-number-hover-border-color": "#40a9ff",
      "input-number-handler-active-bg": "#f4f4f4",
      "input-number-handler-hover-bg": "#40a9ff",
      "input-number-handler-bg": "#fff",
      "input-number-handler-border-color": "#d9d9d9",
      "input-addon-bg": "#fafafa",
      "input-hover-border-color": "#40a9ff",
      "input-disabled-bg": "#f5f5f5",
      "input-outline-offset": "0 0",
      "input-icon-hover-color": "rgba(0, 0, 0, 0.85)",
      "input-disabled-color": "rgba(0, 0, 0, 0.25)",
      "mentions-dropdown-bg": "#fff",
      "mentions-dropdown-menu-item-hover-bg": "#fff",
      "select-border-color": "#d9d9d9",
      "select-item-selected-color": "rgba(0, 0, 0, 0.85)",
      "select-item-selected-font-weight": "600",
      "select-dropdown-bg": "#fff",
      "select-item-selected-bg": "#e6f7ff",
      "select-item-active-bg": "#f5f5f5",
      "select-dropdown-vertical-padding": "5px",
      "select-dropdown-font-size": "14px",
      "select-dropdown-line-height": "22px",
      "select-dropdown-height": "32px",
      "select-background": "#fff",
      "select-clear-background": "#fff",
      "select-selection-item-bg": "#f5f5f5",
      "select-selection-item-border-color": "#f0f0f0",
      "select-single-item-height-lg": "40px",
      "select-multiple-item-height": "24px",
      "select-multiple-item-height-lg": "32px",
      "select-multiple-item-spacing-half": "2px",
      "select-multiple-disabled-background": "#f5f5f5",
      "select-multiple-item-disabled-color": "#bfbfbf",
      "select-multiple-item-disabled-border-color": "#d9d9d9",
      "cascader-bg": "#fff",
      "cascader-item-selected-bg": "#e6f7ff",
      "cascader-menu-bg": "#fff",
      "cascader-menu-border-color-split": "#f0f0f0",
      "cascader-dropdown-vertical-padding": "5px",
      "cascader-dropdown-edge-child-vertical-padding": "4px",
      "cascader-dropdown-font-size": "14px",
      "cascader-dropdown-line-height": "22px",
      "anchor-bg": "transparent",
      "anchor-border-color": "#f0f0f0",
      "anchor-link-top": "4px",
      "anchor-link-left": "16px",
      "anchor-link-padding": "4px 0 4px 16px",
      "tooltip-max-width": "250px",
      "tooltip-color": "#fff",
      "tooltip-bg": "rgba(0, 0, 0, 0.75)",
      "tooltip-arrow-width": "11.3137085px",
      "tooltip-distance": "14.3137085px",
      "tooltip-arrow-color": "rgba(0, 0, 0, 0.75)",
      "tooltip-border-radius": "2px",
      "popover-bg": "#fff",
      "popover-color": "rgba(0, 0, 0, 0.85)",
      "popover-min-width": "177px",
      "popover-min-height": "32px",
      "popover-arrow-width": "11.3137085px",
      "popover-arrow-color": "#fff",
      "popover-arrow-outer-color": "#fff",
      "popover-distance": "15.3137085px",
      "popover-padding-horizontal": "16px",
      "modal-header-padding-vertical": "16px",
      "modal-header-padding-horizontal": "24px",
      "modal-header-bg": "#fff",
      "modal-header-padding": "16px 24px",
      "modal-header-border-width": "1px",
      "modal-header-border-style": "solid",
      "modal-header-title-line-height": "22px",
      "modal-header-title-font-size": "16px",
      "modal-header-border-color-split": "#f0f0f0",
      "modal-header-close-size": "54px",
      "modal-content-bg": "#fff",
      "modal-heading-color": "rgba(0, 0, 0, 0.85)",
      "modal-close-color": "rgba(0, 0, 0, 0.45)",
      "modal-footer-bg": "transparent",
      "modal-footer-border-color-split": "#f0f0f0",
      "modal-footer-border-style": "solid",
      "modal-footer-padding-vertical": "10px",
      "modal-footer-padding-horizontal": "16px",
      "modal-footer-border-width": "1px",
      "modal-mask-bg": "rgba(0, 0, 0, 0.45)",
      "modal-confirm-title-font-size": "16px",
      "modal-border-radius": "2px",
      "progress-default-color": "#1890ff",
      "progress-remaining-color": "#f5f5f5",
      "progress-info-text-color": "rgba(0, 0, 0, 0.85)",
      "progress-radius": "100px",
      "progress-steps-item-bg": "#f3f3f3",
      "progress-text-font-size": "1em",
      "progress-text-color": "rgba(0, 0, 0, 0.85)",
      "progress-circle-text-font-size": "1em",
      "menu-inline-toplevel-item-height": "40px",
      "menu-item-height": "40px",
      "menu-item-group-height": "1.5715",
      "menu-collapsed-width": "80px",
      "menu-bg": "#fff",
      "menu-popup-bg": "#fff",
      "menu-item-color": "rgba(0, 0, 0, 0.85)",
      "menu-inline-submenu-bg": "#fafafa",
      "menu-highlight-color": "#1890ff",
      "menu-highlight-danger-color": "#ff4d4f",
      "menu-item-active-bg": "#e6f7ff",
      "menu-item-active-danger-bg": "#fff1f0",
      "menu-item-active-border-width": "3px",
      "menu-item-group-title-color": "rgba(0, 0, 0, 0.45)",
      "menu-item-vertical-margin": "4px",
      "menu-item-font-size": "14px",
      "menu-item-boundary-margin": "8px",
      "menu-item-padding-horizontal": "20px",
      "menu-item-padding": "0 20px",
      "menu-horizontal-line-height": "46px",
      "menu-icon-margin-right": "10px",
      "menu-icon-size": "14px",
      "menu-icon-size-lg": "16px",
      "menu-item-group-title-font-size": "14px",
      "menu-dark-color": "rgba(255, 255, 255, 0.65)",
      "menu-dark-danger-color": "#ff4d4f",
      "menu-dark-bg": "#001529",
      "menu-dark-arrow-color": "#fff",
      "menu-dark-inline-submenu-bg": "#000c17",
      "menu-dark-highlight-color": "#fff",
      "menu-dark-item-active-bg": "#1890ff",
      "menu-dark-item-active-danger-bg": "#ff4d4f",
      "menu-dark-selected-item-icon-color": "#fff",
      "menu-dark-selected-item-text-color": "#fff",
      "menu-dark-item-hover-bg": "transparent",
      "spin-dot-size-sm": "14px",
      "spin-dot-size": "20px",
      "spin-dot-size-lg": "32px",
      "table-bg": "#fff",
      "table-header-bg": "#fafafa",
      "table-header-color": "rgba(0, 0, 0, 0.85)",
      "table-header-sort-bg": "#f5f5f5",
      "table-row-hover-bg": "#fafafa",
      "table-selected-row-color": "inherit",
      "table-selected-row-bg": "#e6f7ff",
      "table-selected-row-hover-bg": "#dcf4ff",
      "table-expanded-row-bg": "#fbfbfb",
      "table-padding-vertical": "16px",
      "table-padding-horizontal": "16px",
      "table-padding-vertical-md": "12px",
      "table-padding-horizontal-md": "8px",
      "table-padding-vertical-sm": "8px",
      "table-padding-horizontal-sm": "8px",
      "table-border-color": "#f0f0f0",
      "table-border-radius-base": "2px",
      "table-footer-bg": "#fafafa",
      "table-footer-color": "rgba(0, 0, 0, 0.85)",
      "table-header-bg-sm": "#fafafa",
      "table-font-size": "14px",
      "table-font-size-md": "14px",
      "table-font-size-sm": "14px",
      "table-header-cell-split-color": "rgba(0, 0, 0, 0.06)",
      "table-header-sort-active-bg": "rgba(0, 0, 0, 0.04)",
      "table-fixed-header-sort-active-bg": "#f5f5f5",
      "table-header-filter-active-bg": "rgba(0, 0, 0, 0.04)",
      "table-filter-btns-bg": "inherit",
      "table-filter-dropdown-bg": "#fff",
      "table-expand-icon-bg": "#fff",
      "table-selection-column-width": "32px",
      "table-sticky-scroll-bar-bg": "rgba(0, 0, 0, 0.35)",
      "table-sticky-scroll-bar-radius": "4px",
      "tag-border-radius": "2px",
      "tag-default-bg": "#fafafa",
      "tag-default-color": "rgba(0, 0, 0, 0.85)",
      "tag-font-size": "12px",
      "tag-line-height": "20px",
      "picker-bg": "#fff",
      "picker-basic-cell-hover-color": "#f5f5f5",
      "picker-basic-cell-active-with-range-color": "#e6f7ff",
      "picker-basic-cell-hover-with-range-color": "#cbe6ff",
      "picker-basic-cell-disabled-bg": "rgba(0, 0, 0, 0.04)",
      "picker-border-color": "#f0f0f0",
      "picker-date-hover-range-border-color": "#7ec1ff",
      "picker-date-hover-range-color": "#cbe6ff",
      "picker-time-panel-column-width": "56px",
      "picker-time-panel-column-height": "224px",
      "picker-time-panel-cell-height": "28px",
      "picker-panel-cell-height": "24px",
      "picker-panel-cell-width": "36px",
      "picker-text-height": "40px",
      "picker-panel-without-time-cell-height": "66px",
      "calendar-bg": "#fff",
      "calendar-input-bg": "#fff",
      "calendar-border-color": "#fff",
      "calendar-item-active-bg": "#e6f7ff",
      "calendar-column-active-bg": "rgba(230, 247, 255, 0.2)",
      "calendar-full-bg": "#fff",
      "calendar-full-panel-bg": "#fff",
      "carousel-dot-width": "16px",
      "carousel-dot-height": "3px",
      "carousel-dot-active-width": "24px",
      "badge-height": "20px",
      "badge-height-sm": "14px",
      "badge-dot-size": "6px",
      "badge-font-size": "12px",
      "badge-font-size-sm": "12px",
      "badge-font-weight": "normal",
      "badge-status-size": "6px",
      "badge-text-color": "#fff",
      "badge-color": "#ff4d4f",
      "rate-star-color": "#fadb14",
      "rate-star-bg": "#f0f0f0",
      "rate-star-size": "20px",
      "rate-star-hover-scale": "scale(1.1)",
      "card-head-color": "rgba(0, 0, 0, 0.85)",
      "card-head-background": "transparent",
      "card-head-font-size": "16px",
      "card-head-font-size-sm": "14px",
      "card-head-padding": "16px",
      "card-head-padding-sm": "8px",
      "card-head-height": "48px",
      "card-head-height-sm": "36px",
      "card-inner-head-padding": "12px",
      "card-padding-base": "24px",
      "card-padding-base-sm": "12px",
      "card-actions-background": "#fff",
      "card-actions-li-margin": "12px 0",
      "card-skeleton-bg": "#cfd8dc",
      "card-background": "#fff",
      "card-shadow": "0 1px 2px -2px rgba(0, 0, 0, 0.16), 0 3px 6px 0 rgba(0, 0, 0, 0.12), 0 5px 12px 4px rgba(0, 0, 0, 0.09)",
      "card-radius": "2px",
      "card-head-tabs-margin-bottom": "-17px",
      "card-head-extra-color": "rgba(0, 0, 0, 0.85)",
      "comment-bg": "inherit",
      "comment-padding-base": "16px 0",
      "comment-nest-indent": "44px",
      "comment-font-size-base": "14px",
      "comment-font-size-sm": "12px",
      "comment-author-name-color": "rgba(0, 0, 0, 0.45)",
      "comment-author-time-color": "#ccc",
      "comment-action-color": "rgba(0, 0, 0, 0.45)",
      "comment-action-hover-color": "#595959",
      "comment-actions-margin-bottom": "inherit",
      "comment-actions-margin-top": "12px",
      "comment-content-detail-p-margin-bottom": "inherit",
      "tabs-card-head-background": "#fafafa",
      "tabs-card-height": "40px",
      "tabs-card-active-color": "#1890ff",
      "tabs-card-horizontal-padding": "8px 16px",
      "tabs-card-horizontal-padding-sm": "6px 16px",
      "tabs-card-horizontal-padding-lg": "7px 16px 6px",
      "tabs-title-font-size": "14px",
      "tabs-title-font-size-lg": "16px",
      "tabs-title-font-size-sm": "14px",
      "tabs-ink-bar-color": "#1890ff",
      "tabs-bar-margin": "0 0 16px 0",
      "tabs-horizontal-gutter": "32px",
      "tabs-horizontal-margin": "0 0 0 32px",
      "tabs-horizontal-margin-rtl": "0 0 0 32px",
      "tabs-horizontal-padding": "12px 0",
      "tabs-horizontal-padding-lg": "16px 0",
      "tabs-horizontal-padding-sm": "8px 0",
      "tabs-vertical-padding": "8px 24px",
      "tabs-vertical-margin": "16px 0 0 0",
      "tabs-scrolling-size": "32px",
      "tabs-highlight-color": "#1890ff",
      "tabs-hover-color": "#40a9ff",
      "tabs-active-color": "#096dd9",
      "tabs-card-gutter": "2px",
      "tabs-card-tab-active-border-top": "2px solid transparent",
      "back-top-color": "#fff",
      "back-top-bg": "rgba(0, 0, 0, 0.45)",
      "back-top-hover-bg": "rgba(0, 0, 0, 0.85)",
      "avatar-size-base": "32px",
      "avatar-size-lg": "40px",
      "avatar-size-sm": "24px",
      "avatar-font-size-base": "18px",
      "avatar-font-size-lg": "24px",
      "avatar-font-size-sm": "14px",
      "avatar-bg": "#ccc",
      "avatar-color": "#fff",
      "avatar-border-radius": "2px",
      "avatar-group-overlapping": "-8px",
      "avatar-group-space": "3px",
      "avatar-group-border-color": "#fff",
      "switch-height": "22px",
      "switch-sm-height": "16px",
      "switch-min-width": "44px",
      "switch-sm-min-width": "28px",
      "switch-disabled-opacity": "0.4",
      "switch-color": "#1890ff",
      "switch-bg": "#fff",
      "switch-shadow-color": "rgba(0, 35, 11, 0.2)",
      "switch-padding": "2px",
      "switch-inner-margin-min": "7px",
      "switch-inner-margin-max": "25px",
      "switch-sm-inner-margin-min": "5px",
      "switch-sm-inner-margin-max": "18px",
      "pagination-item-bg": "#fff",
      "pagination-item-size": "32px",
      "pagination-item-size-sm": "24px",
      "pagination-font-family": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "pagination-font-weight-active": "500",
      "pagination-item-bg-active": "#fff",
      "pagination-item-link-bg": "#fff",
      "pagination-item-disabled-color-active": "rgba(0, 0, 0, 0.25)",
      "pagination-item-disabled-bg-active": "#e6e6e6",
      "pagination-item-input-bg": "#fff",
      "pagination-mini-options-size-changer-top": "0px",
      "page-header-padding": "24px",
      "page-header-padding-vertical": "16px",
      "page-header-padding-breadcrumb": "12px",
      "page-header-content-padding-vertical": "12px",
      "page-header-back-color": "#000",
      "page-header-ghost-bg": "inherit",
      "page-header-heading-title": "20px",
      "page-header-heading-sub-title": "14px",
      "page-header-tabs-tab-font-size": "16px",
      "breadcrumb-base-color": "rgba(0, 0, 0, 0.45)",
      "breadcrumb-last-item-color": "rgba(0, 0, 0, 0.85)",
      "breadcrumb-font-size": "14px",
      "breadcrumb-icon-font-size": "14px",
      "breadcrumb-link-color": "rgba(0, 0, 0, 0.45)",
      "breadcrumb-link-color-hover": "rgba(0, 0, 0, 0.85)",
      "breadcrumb-separator-color": "rgba(0, 0, 0, 0.45)",
      "breadcrumb-separator-margin": "0 8px",
      "slider-margin": "10px 6px 10px",
      "slider-rail-background-color": "#f5f5f5",
      "slider-rail-background-color-hover": "#e1e1e1",
      "slider-track-background-color": "#91d5ff",
      "slider-track-background-color-hover": "#69c0ff",
      "slider-handle-border-width": "2px",
      "slider-handle-background-color": "#fff",
      "slider-handle-color": "#91d5ff",
      "slider-handle-color-hover": "#69c0ff",
      "slider-handle-color-focus": "#46a6ff",
      "slider-handle-color-focus-shadow": "rgba(24, 144, 255, 0.12)",
      "slider-handle-color-tooltip-open": "#1890ff",
      "slider-handle-size": "14px",
      "slider-handle-margin-top": "-5px",
      "slider-handle-shadow": "0",
      "slider-dot-border-color": "#f0f0f0",
      "slider-dot-border-color-active": "#8cc8ff",
      "slider-disabled-color": "rgba(0, 0, 0, 0.25)",
      "slider-disabled-background-color": "#fff",
      "tree-bg": "#fff",
      "tree-title-height": "24px",
      "tree-child-padding": "18px",
      "tree-directory-selected-color": "#fff",
      "tree-directory-selected-bg": "#1890ff",
      "tree-node-hover-bg": "#f5f5f5",
      "tree-node-selected-bg": "#bae7ff",
      "collapse-header-padding": "12px 16px",
      "collapse-header-padding-extra": "40px",
      "collapse-header-bg": "#fafafa",
      "collapse-content-padding": "16px",
      "collapse-content-bg": "#fff",
      "collapse-header-arrow-left": "16px",
      "skeleton-color": "rgba(190, 190, 190, 0.2)",
      "skeleton-to-color": "rgba(129, 129, 129, 0.24)",
      "skeleton-paragraph-margin-top": "28px",
      "skeleton-paragraph-li-margin-top": "16px",
      "skeleton-paragraph-li-height": "16px",
      "skeleton-title-height": "16px",
      "skeleton-title-paragraph-margin-top": "24px",
      "transfer-header-height": "40px",
      "transfer-item-height": "32px",
      "transfer-disabled-bg": "#f5f5f5",
      "transfer-list-height": "200px",
      "transfer-item-hover-bg": "#f5f5f5",
      "transfer-item-selected-hover-bg": "#dcf4ff",
      "transfer-item-padding-vertical": "6px",
      "transfer-list-search-icon-top": "12px",
      "message-notice-content-padding": "10px 16px",
      "message-notice-content-bg": "#fff",
      "wave-animation-width": "6px",
      "alert-success-border-color": "#b7eb8f",
      "alert-success-bg-color": "#f6ffed",
      "alert-success-icon-color": "#52c41a",
      "alert-info-border-color": "#91d5ff",
      "alert-info-bg-color": "#e6f7ff",
      "alert-info-icon-color": "#1890ff",
      "alert-warning-border-color": "#ffe58f",
      "alert-warning-bg-color": "#fffbe6",
      "alert-warning-icon-color": "#faad14",
      "alert-error-border-color": "#ffccc7",
      "alert-error-bg-color": "#fff2f0",
      "alert-error-icon-color": "#ff4d4f",
      "alert-message-color": "rgba(0, 0, 0, 0.85)",
      "alert-text-color": "rgba(0, 0, 0, 0.85)",
      "alert-close-color": "rgba(0, 0, 0, 0.45)",
      "alert-close-hover-color": "rgba(0, 0, 0, 0.75)",
      "alert-no-icon-padding-vertical": "8px",
      "alert-with-description-no-icon-padding-vertical": "15px",
      "alert-with-description-padding-vertical": "15px",
      "alert-with-description-padding": "15px 15px 15px 24px",
      "alert-icon-top": "12.0005px",
      "alert-with-description-icon-size": "24px",
      "list-header-background": "transparent",
      "list-footer-background": "transparent",
      "list-empty-text-padding": "16px",
      "list-item-padding": "12px 0",
      "list-item-padding-sm": "8px 16px",
      "list-item-padding-lg": "16px 24px",
      "list-item-meta-margin-bottom": "16px",
      "list-item-meta-avatar-margin-right": "16px",
      "list-item-meta-title-margin-bottom": "12px",
      "list-customize-card-bg": "#fff",
      "list-item-meta-description-font-size": "14px",
      "statistic-title-font-size": "14px",
      "statistic-content-font-size": "24px",
      "statistic-unit-font-size": "24px",
      "statistic-font-family": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "drawer-header-padding": "16px 24px",
      "drawer-bg": "#fff",
      "drawer-footer-padding-vertical": "10px",
      "drawer-footer-padding-horizontal": "16px",
      "drawer-header-close-size": "56px",
      "drawer-title-font-size": "16px",
      "drawer-title-line-height": "22px",
      "timeline-width": "2px",
      "timeline-color": "#f0f0f0",
      "timeline-dot-border-width": "2px",
      "timeline-dot-color": "#1890ff",
      "timeline-dot-bg": "#fff",
      "timeline-item-padding-bottom": "20px",
      "typography-title-font-weight": "600",
      "typography-title-margin-top": "1.2em",
      "typography-title-margin-bottom": "0.5em",
      "upload-actions-color": "rgba(0, 0, 0, 0.45)",
      "process-tail-color": "#f0f0f0",
      "steps-nav-arrow-color": "rgba(0, 0, 0, 0.25)",
      "steps-background": "#fff",
      "steps-icon-size": "32px",
      "steps-icon-custom-size": "32px",
      "steps-icon-custom-top": "0px",
      "steps-icon-custom-font-size": "24px",
      "steps-icon-top": "-0.5px",
      "steps-icon-font-size": "16px",
      "steps-icon-margin": "0 8px 0 0",
      "steps-title-line-height": "32px",
      "steps-small-icon-size": "24px",
      "steps-small-icon-margin": "0 8px 0 0",
      "steps-dot-size": "8px",
      "steps-dot-top": "2px",
      "steps-current-dot-size": "10px",
      "steps-description-max-width": "140px",
      "steps-nav-content-max-width": "auto",
      "steps-vertical-icon-width": "16px",
      "steps-vertical-tail-width": "16px",
      "steps-vertical-tail-width-sm": "12px",
      "notification-bg": "#fff",
      "notification-padding-vertical": "16px",
      "notification-padding-horizontal": "24px",
      "result-title-font-size": "24px",
      "result-subtitle-font-size": "14px",
      "result-icon-font-size": "72px",
      "result-extra-margin": "24px 0 0 0",
      "image-size-base": "48px",
      "image-font-size-base": "24px",
      "image-bg": "#f5f5f5",
      "image-color": "#fff",
      "image-mask-font-size": "16px",
      "image-preview-operation-size": "18px",
      "image-preview-operation-color": "rgba(255, 255, 255, 0.85)",
      "image-preview-operation-disabled-color": "rgba(255, 255, 255, 0.25)",
      "segmented-bg": "rgba(0, 0, 0, 0.04)",
      "segmented-hover-bg": "rgba(0, 0, 0, 0.06)",
      "segmented-selected-bg": "#fff",
      "segmented-label-color": "rgba(0, 0, 0, 0.65)",
      "segmented-label-hover-color": "#262626"
    }
  },
  "routes": {
    "1": {
      "path": "/",
      "redirect": "/data-structures",
      "parentId": "ant-design-pro-layout",
      "id": "1",
      "absPath": "/"
    },
    "2": {
      "path": "/sso-success",
      "name": "SSO 成功",
      "hideInMenu": true,
      "layout": false,
      "file": "@/pages/SSOSuccess/index.tsx",
      "id": "2",
      "absPath": "/sso-success",
      "__content": "import React, { useEffect, useState } from 'react';\nimport { Card, Spin, Alert, Button, Typography, Space, Badge } from 'antd';\nimport { CheckCircleOutlined, CloseCircleOutlined, LoadingOutlined } from '@ant-design/icons';\nimport { history } from '@umijs/max';\nimport { saveAuthInfo, User } from '../../auth';\n\nconst { Title, Text } = Typography;\n\ninterface ErrorResponse {\n  success: false;\n  message: string;\n  details: string;\n  code?: string;\n}\n\ninterface SuccessResponse {\n  success: true;\n  token: string;\n  user: {\n    user_id: string;\n    username: string;\n    name: string;\n    avatar: string;\n    email: string;\n    phone: string;\n    gender: string;\n    status: string;\n    department_id: string | null;\n  };\n}\n\nconst SSOSuccess: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<ErrorResponse | null>(null);\n  const [success, setSuccess] = useState<SuccessResponse | null>(null);\n\n  useEffect(() => {\n    // 检查URL参数中的认证数据\n    const checkForAuthData = () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const dataParam = urlParams.get('data');\n      \n      console.log('URL data param:', dataParam);\n      \n      if (dataParam) {\n        try {\n          // 解码并解析认证数据\n          const decodedData = decodeURIComponent(dataParam);\n          const authData = JSON.parse(decodedData) as SuccessResponse;\n          \n          console.log('Parsed auth data:', authData);\n          \n          if (authData.success && authData.token && authData.user) {\n            setSuccess(authData);\n            // 保存认证信息到本地存储\n            // 转换用户数据以匹配User接口\n            const userData: User = {\n              user_id: authData.user.user_id,\n              username: authData.user.username,\n              name: authData.user.name,\n              avatar: authData.user.avatar,\n              email: authData.user.email,\n              phone: authData.user.phone,\n              gender: authData.user.gender,\n              status: authData.user.status,\n              department_id: authData.user.department_id || undefined\n            };\n            \n            console.log('Original user data:', authData.user);\n            console.log('Converted user data:', userData);\n            console.log('Avatar field:', userData.avatar);\n            \n            saveAuthInfo(authData.token, userData);\n            \n            // 延迟重定向到首页\n            setTimeout(() => {\n              history.push('/');\n            }, 2000);\n          } else {\n            setError({\n              success: false,\n              message: '认证数据格式错误',\n              details: '接收到的认证数据格式不正确，缺少必要的认证信息。',\n              code: 'INVALID_AUTH_DATA'\n            });\n          }\n        } catch (err) {\n          console.error('Failed to parse auth data:', err);\n          setError({\n            success: false,\n            message: '数据解析失败',\n            details: '无法解析认证数据，可能是数据格式错误或传输过程中出现问题。',\n            code: 'PARSE_ERROR'\n          });\n        }\n      } else {\n        setError({\n          success: false,\n          message: '未找到认证数据',\n          details: 'SSO成功页面未接收到认证数据。请检查认证流程是否正确。',\n          code: 'NO_AUTH_DATA'\n        });\n      }\n      \n      setLoading(false);\n    };\n\n    // 延迟检查，确保页面完全加载\n    setTimeout(checkForAuthData, 100);\n  }, []);\n\n  const handleGoHome = () => {\n    history.push('/');\n  };\n\n  const handleRetry = () => {\n    // 重新检查URL参数\n    window.location.reload();\n  };\n\n  if (loading) {\n    return (\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'center', \n        alignItems: 'center', \n        minHeight: '100vh',\n        background: '#f5f5f5'\n      }}>\n        <Card style={{ width: 400, textAlign: 'center' }}>\n          <Spin \n            indicator={<LoadingOutlined style={{ fontSize: 24 }} spin />} \n            size=\"large\"\n          />\n          <Title level={4} style={{ marginTop: 16, marginBottom: 8 }}>\n            正在处理认证信息\n          </Title>\n          <Text type=\"secondary\">\n            请稍候，正在验证您的身份信息...\n          </Text>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'center', \n        alignItems: 'center', \n        minHeight: '100vh',\n        background: '#f5f5f5'\n      }}>\n        <Card style={{ width: 500 }}>\n          <div style={{ textAlign: 'center', marginBottom: 24 }}>\n            <CloseCircleOutlined \n              style={{ fontSize: 48, color: '#ff4d4f', marginBottom: 16 }} \n            />\n            <Title level={3} style={{ color: '#ff4d4f', marginBottom: 8 }}>\n              {error.message}\n            </Title>\n            <Text type=\"secondary\" style={{ fontSize: 14 }}>\n              {error.details}\n            </Text>\n          </div>\n          \n          <Alert\n            message=\"错误详情\"\n            description={\n              <div>\n                <Text strong>错误代码：</Text> {error.code || 'UNKNOWN'}<br />\n                <Text strong>错误信息：</Text> {error.message}<br />\n                <Text strong>详细信息：</Text> {error.details}\n              </div>\n            }\n            type=\"error\"\n            showIcon\n            style={{ marginBottom: 24 }}\n          />\n          \n          <Space style={{ width: '100%', justifyContent: 'center' }}>\n            <Button type=\"primary\" onClick={handleRetry}>\n              重试\n            </Button>\n            <Button onClick={handleGoHome}>\n              返回首页\n            </Button>\n          </Space>\n        </Card>\n      </div>\n    );\n  }\n\n  if (success) {\n    return (\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'center', \n        alignItems: 'center', \n        minHeight: '100vh',\n        background: '#f5f5f5'\n      }}>\n        <Card style={{ width: 400, textAlign: 'center' }}>\n          <CheckCircleOutlined \n            style={{ fontSize: 48, color: '#52c41a', marginBottom: 16 }} \n          />\n          <Title level={3} style={{ color: '#52c41a', marginBottom: 8 }}>\n            认证成功\n          </Title>\n          <Text type=\"secondary\" style={{ fontSize: 14 }}>\n            欢迎回来，{success.user.username}！\n          </Text>\n          \n          <Alert\n            message=\"用户信息\"\n            description={\n              <div style={{ textAlign: 'left' }}>\n                <Text strong>姓名：</Text> {success.user.name}<br />\n                <Text strong>邮箱：</Text> {success.user.email}<br />\n                <Text strong>状态：</Text> <Badge status=\"success\" className='me-2' /> {success.user.status}\n              </div>\n            }\n            type=\"success\"\n            // showIcon\n            style={{ marginTop: 16, marginBottom: 16 }}\n          />\n          \n          <Text type=\"secondary\" style={{ fontSize: 12 }}>\n            正在跳转到首页...\n          </Text>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ \n      display: 'flex', \n      justifyContent: 'center', \n      alignItems: 'center', \n      minHeight: '100vh',\n      background: '#f5f5f5'\n    }}>\n      <Card style={{ width: 400, textAlign: 'center' }}>\n        <Title level={3}>等待认证数据</Title>\n        <Text type=\"secondary\">\n          正在等待认证数据...\n        </Text>\n      </Card>\n    </div>\n  );\n};\n\nexport default SSOSuccess; ",
      "__isJSFile": true,
      "__absFile": "/Users/yanfang/MOM/BDC/frontend/src/pages/SSOSuccess/index.tsx"
    },
    "3": {
      "path": "/test-auth",
      "name": "认证测试",
      "hideInMenu": true,
      "file": "@/pages/test-auth.tsx",
      "parentId": "ant-design-pro-layout",
      "id": "3",
      "absPath": "/test-auth",
      "__content": "import React, { useEffect, useState } from 'react';\nimport { Card, Button, message, Space } from 'antd';\nimport { request } from '@umijs/max';\n\nconst TestAuth: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState<any>(null);\n\n  // 测试需要认证的API\n  const testAuthApi = async () => {\n    setLoading(true);\n    try {\n      const response = await request('/api/test/auth', {\n        method: 'GET',\n      });\n      setResult(response);\n      message.success('认证API请求成功');\n    } catch (error) {\n      console.error('认证API请求失败:', error);\n      setResult(error);\n      message.error('认证API请求失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 测试无需认证的API\n  const testPublicApi = async () => {\n    setLoading(true);\n    try {\n      const response = await request('/api/test/public', {\n        method: 'GET',\n      });\n      setResult(response);\n      message.success('公开API请求成功');\n    } catch (error) {\n      console.error('公开API请求失败:', error);\n      setResult(error);\n      message.error('公开API请求失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 测试401错误\n  const testUnauthorized = async () => {\n    setLoading(true);\n    try {\n      const response = await request('/api/test/unauthorized', {\n        method: 'GET',\n      });\n      setResult(response);\n      message.success('401错误API请求成功');\n    } catch (error) {\n      console.error('401错误API请求失败:', error);\n      setResult(error);\n      message.error('401错误API请求失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 测试业务错误\n  const testBusinessError = async () => {\n    setLoading(true);\n    try {\n      const response = await request('/api/test/error', {\n        method: 'GET',\n      });\n      setResult(response);\n      message.success('业务错误API请求成功');\n    } catch (error) {\n      console.error('业务错误API请求失败:', error);\n      setResult(error);\n      message.error('业务错误API请求失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 测试token管理\n  const testTokenStats = async () => {\n    setLoading(true);\n    try {\n      const response = await request('/api/test/token-stats', {\n        method: 'GET',\n      });\n      setResult(response);\n      message.success('Token管理测试成功');\n    } catch (error) {\n      console.error('Token管理测试失败:', error);\n      setResult(error);\n      message.error('Token管理测试失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 测试token管理API\n  const testTokenManagement = async () => {\n    setLoading(true);\n    try {\n      const response = await request('/api/token-management/stats', {\n        method: 'GET',\n      });\n      setResult(response);\n      message.success('Token管理API测试成功');\n    } catch (error) {\n      console.error('Token管理API测试失败:', error);\n      setResult(error);\n      message.error('Token管理API测试失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 测试无token的情况\n  const testNoToken = async () => {\n    setLoading(true);\n    // 临时清除token\n    const originalToken = localStorage.getItem('token');\n    localStorage.removeItem('token');\n    \n    try {\n      const response = await request('/api/test/auth', {\n        method: 'GET',\n      });\n      setResult(response);\n      message.success('无tokenAPI请求成功');\n    } catch (error) {\n      console.error('无tokenAPI请求失败:', error);\n      setResult(error);\n      message.error('无tokenAPI请求失败');\n    } finally {\n      // 恢复token\n      if (originalToken) {\n        localStorage.setItem('token', originalToken);\n      }\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ padding: 24 }}>\n      <Card title=\"请求拦截器测试\" style={{ maxWidth: 800, margin: '0 auto' }}>\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n          <Button \n            type=\"primary\" \n            onClick={testAuthApi} \n            loading={loading}\n            block\n          >\n            测试需要认证的API\n          </Button>\n          \n          <Button \n            onClick={testPublicApi} \n            loading={loading}\n            block\n          >\n            测试公开API\n          </Button>\n          \n          <Button \n            onClick={testUnauthorized} \n            loading={loading}\n            block\n          >\n            测试401错误\n          </Button>\n          \n          <Button \n            onClick={testBusinessError} \n            loading={loading}\n            block\n          >\n            测试业务错误\n          </Button>\n          \n          <Button \n            onClick={testTokenStats} \n            loading={loading}\n            block\n          >\n            测试Token管理\n          </Button>\n          \n          <Button \n            onClick={testTokenManagement} \n            loading={loading}\n            block\n          >\n            测试Token管理API\n          </Button>\n          \n          <Button \n            danger\n            onClick={testNoToken} \n            loading={loading}\n            block\n          >\n            测试无token情况\n          </Button>\n          \n          {result && (\n            <Card title=\"请求结果\" size=\"small\">\n              <pre style={{ fontSize: 12, overflow: 'auto' }}>\n                {JSON.stringify(result, null, 2)}\n              </pre>\n            </Card>\n          )}\n        </Space>\n      </Card>\n    </div>\n  );\n};\n\nexport default TestAuth;\n",
      "__isJSFile": true,
      "__absFile": "/Users/yanfang/MOM/BDC/frontend/src/pages/test-auth.tsx"
    },
    "4": {
      "path": "/data-structures",
      "name": "数据结构管理",
      "icon": "BlockOutlined",
      "file": "@/pages/SchemaManagement/index.tsx",
      "parentId": "ant-design-pro-layout",
      "id": "4",
      "absPath": "/data-structures",
      "__content": "import React, { useState, useEffect, useMemo } from 'react';\nimport { Table, Button, Space, Tag, Tooltip, Switch, message, Modal, Form, Input, Select, List, Flex, InputNumber, Cascader, TreeSelect, Badge, Popconfirm, Checkbox, notification } from 'antd';\nimport type { CascaderProps } from 'antd';\nimport type { DefaultOptionType } from 'antd/es/cascader';\nimport { PlusOutlined, EditOutlined, DeleteOutlined, ExportOutlined, BuildOutlined, ApartmentOutlined, CloudDownloadOutlined, CaretDownOutlined, CaretRightOutlined, TableOutlined } from '@ant-design/icons';\nimport { Splitter } from 'antd';\nimport { getSchemas, putSchemasId, postSchemas, deleteSchemasId } from '@/services/BDC/api/schemaManagement';\nimport { getEnums } from '@/services/BDC/api/enumManagement';\nimport { buildTree, enumTreeConfig } from '@/utils/treeBuilder';\nimport { EnumTreeNode } from '@/types/enum';\nimport SchemaValidator from '@/components/SchemaValidator';\nimport { useNavigate } from 'react-router-dom';\nimport { handleDownloadORM } from './ormGenerator';\n\nconst { Option } = Select;\n\n// 判断字段是否可以用作关联字段\nconst isValidRelationField = (field: Field) => {\n  // 可以用作唯一标识的字段类型\n  if (field.type === 'string' || field.type === 'number') {\n    return true;\n  }\n  return false;\n};\n\n// 判断字段是否是主键 - 暂时注释，等待前端更新\n// const isPrimaryKeyField = (field: Field) => {\n//   return field.type === 'string' && field.name === 'id';\n// };\n\ntype Field = API.UuidField | API.AutoIncrementField | API.StringField | API.TextField | API.NumberField | API.BooleanField | API.DateField | API.EnumField | API.RelationField | API.MediaField | API.ApiField;\n\n// 扩展 RelationField 类型\ninterface ExtendedRelationField extends API.RelationField {\n  relationType?: 'oneToOne' | 'oneToMany' | 'manyToOne' | 'manyToMany';\n}\n\ninterface SchemaListItem {\n  id?: string;\n  name: string;\n  code: string;\n  description?: string;\n  isActive?: boolean;\n  version?: number;\n  createdAt?: string;\n  updatedAt?: string;\n  fields: Field[];\n  keyIndexes?: {\n    primaryKey?: string[];\n    indexes?: {\n      name?: string;\n      fields?: string[];\n      type?: \"unique\" | \"index\" | \"fulltext\" | \"spatial\";\n    }[];\n  };\n}\n\ninterface SchemaTreeItem extends Omit<SchemaListItem, 'fields'> {\n  children?: SchemaTreeItem[];\n  parentCode?: string;\n  fields?: Field[];\n  code: string;\n  name: string;\n  disabled?: boolean;\n}\n\nconst SchemaManagement: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [schemas, setSchemas] = useState<SchemaListItem[]>([]);\n  const [selectedSchema, setSelectedSchema] = useState<SchemaListItem | null>(null);\n  const [isSchemaModalVisible, setIsSchemaModalVisible] = useState(false);\n  const [isFieldModalVisible, setIsFieldModalVisible] = useState(false);\n  const [editingField, setEditingField] = useState<Field | null>(null);\n  const [schemaForm] = Form.useForm();\n  const [fieldForm] = Form.useForm();\n  const [fieldType, setFieldType] = useState<string>('');\n  const [numberType, setNumberType] = useState<string>('');\n  const [enums, setEnums] = useState<API.Enum[]>([]);\n  const [enumTreeData, setEnumTreeData] = useState<EnumTreeNode[]>([]);\n  const [isEnumModalVisible, setIsEnumModalVisible] = useState(false);\n  const [enumSearchValue, setEnumSearchValue] = useState('');\n  const [selectedEnumId, setSelectedEnumId] = useState<string>();\n  const [enumDisplayText, setEnumDisplayText] = useState<string>('');\n  const [windowHeight, setWindowHeight] = useState(window.innerHeight);\n  const [schemaTreeData, setSchemaTreeData] = useState<SchemaTreeItem[]>([]);\n  const [expandedRowKeys, setExpandedRowKeys] = useState<string[]>([]);\n  const [selectedRowKeys, setSelectedRowKeys] = useState<string[]>([]);\n  const [isSyncMode, setIsSyncMode] = useState(false);\n  const navigate = useNavigate();\n\n  // 使用 useMemo 缓存过滤后的枚举列表\n  const filteredEnums = useMemo(() => {\n    return enums.filter(e => {\n      return !enumSearchValue || \n        e.name.toLowerCase().includes(enumSearchValue.toLowerCase()) ||\n        e.code.toLowerCase().includes(enumSearchValue.toLowerCase());\n    });\n  }, [enums, enumSearchValue]);\n\n  // 字段类型选项\n  const fieldTypes = [\n    { label: 'UUID', value: 'uuid' },\n    { label: '自增长ID', value: 'auto_increment' },\n    { label: '字符串', value: 'string' },\n    { label: '文本', value: 'text' },\n    { label: '数字', value: 'number' },\n    { label: '布尔值', value: 'boolean' },\n    { label: '日期', value: 'date' },\n    { label: '枚举', value: 'enum' },\n    { label: '关联', value: 'relation' },\n    { label: '媒体', value: 'media' },\n    { label: 'API', value: 'api' }\n  ];\n\n  // 将扁平数据转换为树形结构\n  const buildSchemaTree = (schemas: SchemaListItem[]): SchemaTreeItem[] => {\n    const codeMap = new Map<string, SchemaTreeItem>();\n    const result: SchemaTreeItem[] = [];\n    const allCodes: string[] = []; // 收集所有节点的 code\n\n    // 首先创建所有节点\n    schemas.forEach(schema => {\n      const codes = schema.code.split(':');\n      let currentPath = '';\n      \n      codes.forEach((code, index) => {\n        const parentPath = currentPath;\n        currentPath = currentPath ? `${currentPath}:${code}` : code;\n        allCodes.push(currentPath); // 添加到所有 codes 列表\n        \n        if (!codeMap.has(currentPath)) {\n          const node: SchemaTreeItem = {\n            ...(index === codes.length - 1 ? {\n              ...schema,\n              fields: schema.fields || []\n            } : {}),\n            code: currentPath,\n            name: index === codes.length - 1 ? schema.name : code,\n            children: [],\n            parentCode: parentPath || undefined,\n            fields: index === codes.length - 1 ? schema.fields || [] : []\n          };\n          codeMap.set(currentPath, node);\n        }\n      });\n    });\n\n    // 构建树形结构\n    codeMap.forEach((node) => {\n      if (node.parentCode) {\n        const parent = codeMap.get(node.parentCode);\n        if (parent) {\n          parent.children = parent.children || [];\n          parent.children.push(node);\n        }\n      } else {\n        result.push(node);\n      }\n    });\n\n    // 设置所有节点为展开状态\n    setExpandedRowKeys(allCodes);\n\n    return result;\n  };\n\n  const fetchSchemas = async () => {\n    setLoading(true);\n    try {\n      const response = await getSchemas({\n        code: undefined,\n        name: undefined\n      });\n      \n      const transformedData: SchemaListItem[] = response.map(item => {\n        const fields = (item.fields || []).map(field => {\n          const fieldData = field as any;\n          const baseField = {\n            id: fieldData.id,\n            name: fieldData.name,\n            description: fieldData.description,\n            required: fieldData.required,\n            // isPrimaryKey: fieldData.isPrimaryKey, // 暂时注释，等待前端更新\n            length: fieldData.length,\n            dateType: fieldData.dateType\n          };\n\n          switch (fieldData.type) {\n            case 'uuid': {\n              const typedField: API.UuidField = {\n                ...baseField,\n                type: 'uuid'\n              };\n              return typedField;\n            }\n            case 'auto_increment': {\n              const typedField: API.AutoIncrementField = {\n                ...baseField,\n                type: 'auto_increment'\n              };\n              return typedField;\n            }\n            case 'string': {\n              const typedField: API.StringField = {\n                ...baseField,\n                type: 'string'\n              };\n              return typedField;\n            }\n            case 'text': {\n              const typedField: API.TextField = {\n                ...baseField,\n                type: 'text'\n              };\n              return typedField;\n            }\n            case 'number': {\n              const typedField: API.NumberField = {\n                ...baseField,\n                type: 'number'\n              };\n              return typedField;\n            }\n            case 'boolean': {\n              const typedField: API.BooleanField = {\n                ...baseField,\n                type: 'boolean'\n              };\n              return typedField;\n            }\n            case 'date': {\n              const typedField: API.DateField = {\n                ...baseField,\n                type: 'date'\n              };\n              return typedField;\n            }\n            case 'enum': {\n              const typedField: API.EnumField = {\n                ...baseField,\n                type: 'enum',\n                enumConfig: fieldData.enumConfig || {\n                  targetEnumCode: fieldData.targetEnumCode,\n                  multiple: fieldData.multiple,\n                  defaultValues: fieldData.defaultValues\n                }\n              };\n              return typedField;\n            }\n            case 'relation': {\n              const typedField: API.RelationField = {\n                ...baseField,\n                type: 'relation',\n                relationConfig: fieldData.relationConfig || {\n                  targetSchemaCode: fieldData.targetSchemaCode,\n                  targetField: fieldData.targetField,\n                  multiple: fieldData.multiple || false,\n                  cascadeDelete: fieldData.cascadeDelete || 'restrict',\n                  displayFields: fieldData.displayFields || []\n                }\n              };\n              return typedField;\n            }\n            case 'media': {\n              const typedField: API.MediaField = {\n                ...baseField,\n                type: 'media',\n                mediaConfig: fieldData.mediaConfig || {\n                  mediaType: fieldData.mediaType,\n                  formats: fieldData.formats || [],\n                  maxSize: fieldData.maxSize,\n                  multiple: fieldData.multiple\n                }\n              };\n              return typedField;\n            }\n            case 'api': {\n              const typedField: API.ApiField = {\n                ...baseField,\n                type: 'api',\n                apiConfig: fieldData.apiConfig || {\n                  endpoint: fieldData.endpoint,\n                  method: fieldData.method,\n                  multiple: fieldData.multiple,\n                  params: fieldData.params,\n                  headers: fieldData.headers,\n                  resultMapping: fieldData.resultMapping\n                }\n              };\n              return typedField;\n            }\n            default:\n              throw new Error(`未知的字段类型: ${fieldData.type}`);\n          }\n        }) as unknown as Field[];\n\n        const itemData = item as any;\n        const schemaItem: SchemaListItem = {\n          id: itemData.id || '',\n          name: itemData.name || '',\n          code: itemData.code || '',\n          description: itemData.description,\n          isActive: itemData.isActive,\n          version: itemData.version,\n          createdAt: itemData.createdAt,\n          updatedAt: itemData.updatedAt,\n          fields,\n          keyIndexes: itemData.keyIndexes || {\n            primaryKey: [],\n            indexes: []\n          }\n        };\n        \n        // 调试日志：检查keyIndexes数据\n        if (itemData.keyIndexes) {\n          console.log(`Schema ${schemaItem.name} keyIndexes:`, itemData.keyIndexes);\n        }\n        \n        return schemaItem;\n      });\n\n      setSchemas(transformedData);\n      setSchemaTreeData(buildSchemaTree(transformedData));\n    } catch (error) {\n      message.error('获取数据表列表失败');\n    }\n    setLoading(false);\n  };\n\n  const fetchEnums = async () => {\n    console.log('开始获取枚举列表');\n    try {\n      const response = await getEnums({});\n      console.log('枚举列表响应:', response);\n      setEnums(response);\n      // 构建枚举树\n      const treeData = buildTree(response, enumTreeConfig);\n      console.log('枚举树数据:', treeData);\n      setEnumTreeData(treeData);\n    } catch (error: any) {\n      console.error('获取枚举列表失败:', error);\n      message.error('获取枚举列表失败');\n    }\n  };\n\n  useEffect(() => {\n    fetchSchemas();\n    fetchEnums();\n\n    const handleResize = () => {\n      setWindowHeight(window.innerHeight);\n    };\n\n    // 注册窗口大小变化事件\n    window.addEventListener('resize', handleResize);\n    \n    // 组件卸载时移除事件监听\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n\n  }, []);\n\n  const handleSchemaSelect = (schema: SchemaListItem) => {\n    console.log('Selected schema:', schema);\n    setSelectedSchema(schema);\n  };\n\n  const handleSchemaCreate = async (values: any) => {\n    try {\n      await postSchemas({\n        name: values.name,\n        code: values.code,\n        description: values.description,\n        fields: []\n      });\n      message.success('创建成功');\n      setIsSchemaModalVisible(false);\n      schemaForm.resetFields();\n      fetchSchemas();\n    } catch (error) {\n      message.error('创建失败');\n    }\n  };\n\n  const handleSchemaDelete = async (id: string) => {\n    if (!id) return;\n    try {\n      await deleteSchemasId({ id });\n      message.success('删除成功');\n      if (selectedSchema?.id === id) {\n        setSelectedSchema(null);\n      }\n      fetchSchemas();\n    } catch (error) {\n      message.error('删除失败');\n    }\n  };\n\n  const handleFieldCreate = async (values: any) => {\n    if (!selectedSchema?.id) return;\n    \n    try {\n      console.log('开始创建字段，values:', values);\n      \n      let newField: Field;\n      const baseFieldData = {\n        id: crypto.randomUUID(),\n        name: values.name,\n        type: values.type as API.BaseField['type'],\n        description: values.description,\n        required: values.required,\n        // isPrimaryKey: values.isPrimaryKey, // 暂时注释，等待前端更新\n        length: values.length,\n        dateType: values.dateType\n      };\n\n      console.log('基础字段数据:', baseFieldData);\n\n      // 根据字段类型创建正确的类型\n      switch (values.type) {\n        case 'uuid':\n          newField = {\n            ...baseFieldData,\n            type: 'uuid'\n          } as API.UuidField;\n          break;\n        case 'auto_increment':\n          newField = {\n            ...baseFieldData,\n            type: 'auto_increment'\n          } as API.AutoIncrementField;\n          break;\n        case 'string':\n          newField = {\n            ...baseFieldData,\n            type: 'string'\n          } as API.StringField;\n          break;\n        case 'text':\n          newField = {\n            ...baseFieldData,\n            type: 'text'\n          } as API.TextField;\n          break;\n        case 'number':\n          newField = {\n            ...baseFieldData,\n            type: 'number'\n          } as API.NumberField;\n          break;\n        case 'boolean':\n          newField = {\n            ...baseFieldData,\n            type: 'boolean'\n          } as API.BooleanField;\n          break;\n        case 'date':\n          newField = {\n            ...baseFieldData,\n            type: 'date'\n          } as API.DateField;\n          break;\n        case 'enum':\n          newField = {\n            ...baseFieldData,\n            type: 'enum',\n            enumConfig: {\n              targetEnumCode: values.targetEnumCode,\n              multiple: values.multiple,\n              defaultValues: values.defaultValues\n            }\n          } as API.EnumField;\n          break;\n        case 'relation':\n          newField = {\n            ...baseFieldData,\n            type: 'relation',\n            relationConfig: {\n              targetSchemaCode: values.targetSchema,\n              targetField: values.targetField,\n              multiple: ['oneToMany', 'manyToMany'].includes(values.relationType),\n              cascadeDelete: values.cascadeDelete,\n              displayFields: values.displayFields || []\n            }\n          } as API.RelationField;\n          break;\n        case 'media':\n          newField = {\n            ...baseFieldData,\n            type: 'media',\n            mediaConfig: {\n              mediaType: values.mediaType,\n              formats: values.formats || [],\n              maxSize: values.maxSize,\n              multiple: values.multiple\n            }\n          } as API.MediaField;\n          break;\n        case 'api':\n          newField = {\n            ...baseFieldData,\n            type: 'api',\n            apiConfig: {\n              endpoint: values.endpoint,\n              method: values.method,\n              multiple: values.multiple,\n              params: values.params,\n              headers: values.headers,\n              resultMapping: values.resultMapping\n            }\n          } as API.ApiField;\n          break;\n        default:\n          throw new Error(`未知的字段类型: ${values.type}`);\n      }\n\n      console.log('新创建的字段:', newField);\n\n      const updatedFields = [...selectedSchema.fields, newField];\n      \n      console.log('准备发送的字段列表:', updatedFields);\n      console.log('发送到API的数据:', {\n        id: selectedSchema.id,\n        fields: updatedFields\n      });\n      \n      await putSchemasId(\n        { id: selectedSchema.id },\n        {\n          fields: updatedFields as any\n        }\n      );\n      message.success('字段添加成功');\n      setIsFieldModalVisible(false);\n      fieldForm.resetFields();\n      fetchSchemas();\n      setSelectedSchema({\n        ...selectedSchema,\n        fields: updatedFields,\n      });\n    } catch (error: any) {\n      console.error('字段添加失败，详细错误:', error);\n      console.error('错误响应:', error.response);\n      console.error('错误消息:', error.message);\n      \n      let errorMessage = '字段添加失败';\n      if (error.response?.data?.message) {\n        errorMessage += `: ${error.response.data.message}`;\n      } else if (error.message) {\n        errorMessage += `: ${error.message}`;\n      }\n      \n      message.error(errorMessage);\n    }\n  };\n\n  const handleFieldEdit = async (values: any, index: number) => {\n    if (!selectedSchema?.id) return;\n    \n    try {\n      console.log('开始编辑字段，values:', values);\n      console.log('当前字段索引:', index);\n      console.log('当前字段:', selectedSchema.fields[index]);\n      \n      let updatedField: Field;\n      const baseFieldData = {\n        id: selectedSchema.fields[index].id,\n        name: values.name,\n        type: values.type as API.BaseField['type'],\n        description: values.description,\n        required: values.required,\n        // isPrimaryKey: values.isPrimaryKey, // 暂时注释，等待前端更新\n        length: values.length,\n        dateType: values.dateType\n      };\n\n      console.log('基础字段数据:', baseFieldData);\n\n      // 根据字段类型创建正确的类型\n      switch (values.type) {\n        case 'uuid':\n          updatedField = {\n            ...baseFieldData,\n            type: 'uuid'\n          } as API.UuidField;\n          break;\n        case 'auto_increment':\n          updatedField = {\n            ...baseFieldData,\n            type: 'auto_increment'\n          } as API.AutoIncrementField;\n          break;\n        case 'string':\n          updatedField = {\n            ...baseFieldData,\n            type: 'string'\n          } as API.StringField;\n          break;\n        case 'text':\n          updatedField = {\n            ...baseFieldData,\n            type: 'text'\n          } as API.TextField;\n          break;\n        case 'number':\n          updatedField = {\n            ...baseFieldData,\n            type: 'number'\n          } as API.NumberField;\n          break;\n        case 'boolean':\n          updatedField = {\n            ...baseFieldData,\n            type: 'boolean'\n          } as API.BooleanField;\n          break;\n        case 'date':\n          updatedField = {\n            ...baseFieldData,\n            type: 'date'\n          } as API.DateField;\n          break;\n        case 'enum':\n          updatedField = {\n            ...baseFieldData,\n            type: 'enum',\n            enumConfig: {\n              targetEnumCode: values.targetEnumCode,\n              multiple: values.multiple,\n              defaultValues: values.defaultValues\n            }\n          } as API.EnumField;\n          break;\n        case 'relation':\n          updatedField = {\n            ...baseFieldData,\n            type: 'relation',\n            relationConfig: {\n              targetSchemaCode: values.targetSchema,\n              targetField: values.targetField,\n              multiple: ['oneToMany', 'manyToMany'].includes(values.relationType),\n              cascadeDelete: values.cascadeDelete,\n              displayFields: values.displayFields || []\n            }\n          } as API.RelationField;\n          break;\n        case 'media':\n          updatedField = {\n            ...baseFieldData,\n            type: 'media',\n            mediaConfig: {\n              mediaType: values.mediaType,\n              formats: values.formats || [],\n              maxSize: values.maxSize,\n              multiple: values.multiple\n            }\n          } as API.MediaField;\n          break;\n        case 'api':\n          updatedField = {\n            ...baseFieldData,\n            type: 'api',\n            apiConfig: {\n              endpoint: values.endpoint,\n              method: values.method,\n              multiple: values.multiple,\n              params: values.params,\n              headers: values.headers,\n              resultMapping: values.resultMapping\n            }\n          } as API.ApiField;\n          break;\n        default:\n          throw new Error(`未知的字段类型: ${values.type}`);\n      }\n\n      const updatedFields = [...selectedSchema.fields];\n      updatedFields[index] = updatedField;\n      \n      console.log('准备发送的字段列表:', updatedFields);\n      console.log('发送到API的数据:', {\n        id: selectedSchema.id,\n        fields: updatedFields\n      });\n      \n      await putSchemasId(\n        { id: selectedSchema.id },\n        {\n          fields: updatedFields as any\n        }\n      );\n      message.success('字段更新成功');\n      setIsFieldModalVisible(false);\n      fieldForm.resetFields();\n      fetchSchemas();\n      setSelectedSchema({\n        ...selectedSchema,\n        fields: updatedFields,\n      });\n    } catch (error: any) {\n      console.error('字段更新失败，详细错误:', error);\n      console.error('错误响应:', error.response);\n      console.error('错误消息:', error.message);\n      \n      let errorMessage = '字段更新失败';\n      if (error.response?.data?.message) {\n        errorMessage += `: ${error.response.data.message}`;\n      } else if (error.message) {\n        errorMessage += `: ${error.message}`;\n      }\n      \n      message.error(errorMessage);\n    }\n  };\n\n  const handleFieldDelete = async (index: number) => {\n    if (!selectedSchema?.id) return;\n    \n    try {\n      const updatedFields = selectedSchema.fields.filter((_, i) => i !== index);\n      await putSchemasId(\n        { id: selectedSchema.id },\n        {\n          fields: updatedFields as any\n        }\n      );\n      message.success('字段删除成功');\n      fetchSchemas();\n      setSelectedSchema({\n        ...selectedSchema,\n        fields: updatedFields,\n      });\n    } catch (error) {\n      message.error('字段删除失败');\n    }\n  };\n\n  // 字段名验证规则\n  const validateFieldName = (_: unknown, value: string) => {\n    if (!value) {\n      return Promise.reject('请输入字段名');\n    }\n    if (!/^[a-z][a-z0-9_]*$/.test(value)) {\n      return Promise.reject('字段名必须以小写字母开头，只能包含小写字母、数字和下划线');\n    }\n    return Promise.resolve();\n  };\n\n  // 处理同步模式切换\n  const handleSyncModeToggle = () => {\n    setIsSyncMode(!isSyncMode);\n    if (isSyncMode) {\n      // 退出同步模式时清空选择\n      setSelectedRowKeys([]);\n    }\n  };\n\n  // 处理将选择中的表下载为ORM文件\n  const handleDownloadORMClick = async () => {\n    // 获取选中的数据表\n    const selectedSchemas = schemas.filter(schema => selectedRowKeys.includes(schema.code));\n    \n    // 调用 ORM 生成器，传入枚举数据\n    await handleDownloadORM(selectedSchemas, schemas, enums);\n  };\n\n  // 处理全选/取消全选\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      // 全选：获取所有叶子节点的code\n      const allLeafCodes: string[] = [];\n      const collectLeafCodes = (nodes: SchemaTreeItem[]) => {\n        nodes.forEach(node => {\n          if (node.children?.length) {\n            collectLeafCodes(node.children);\n          } else {\n            allLeafCodes.push(node.code);\n          }\n        });\n      };\n      collectLeafCodes(schemaTreeData);\n      setSelectedRowKeys(allLeafCodes);\n    } else {\n      // 取消全选\n      setSelectedRowKeys([]);\n    }\n  };\n\n  // 检查是否全选\n  const isAllSelected = useMemo(() => {\n    const allLeafCodes: string[] = [];\n    const collectLeafCodes = (nodes: SchemaTreeItem[]) => {\n      nodes.forEach(node => {\n        if (node.children?.length) {\n          collectLeafCodes(node.children);\n        } else {\n          allLeafCodes.push(node.code);\n        }\n      });\n    };\n    collectLeafCodes(schemaTreeData);\n    return allLeafCodes.length > 0 && selectedRowKeys.length === allLeafCodes.length;\n  }, [schemaTreeData, selectedRowKeys]);\n\n  // 检查是否部分选中\n  const isIndeterminate = useMemo(() => {\n    const allLeafCodes: string[] = [];\n    const collectLeafCodes = (nodes: SchemaTreeItem[]) => {\n      nodes.forEach(node => {\n        if (node.children?.length) {\n          collectLeafCodes(node.children);\n        } else {\n          allLeafCodes.push(node.code);\n        }\n      });\n    };\n    collectLeafCodes(schemaTreeData);\n    return selectedRowKeys.length > 0 && selectedRowKeys.length < allLeafCodes.length;\n  }, [schemaTreeData, selectedRowKeys]);\n\n  // 处理虚拟节点选择（全选/全不选子节点）\n  const handleVirtualNodeSelect = (record: SchemaTreeItem, checked: boolean) => {\n    if (!record.children?.length) return;\n    \n    // 收集所有子节点的 code\n    const childCodes: string[] = [];\n    const collectChildCodes = (nodes: SchemaTreeItem[]) => {\n      nodes.forEach(node => {\n        if (node.children?.length) {\n          collectChildCodes(node.children);\n        } else {\n          childCodes.push(node.code);\n        }\n      });\n    };\n    collectChildCodes(record.children);\n    \n    // 更新选中状态\n    if (checked) {\n      // 全选：添加所有子节点\n      const newSelectedKeys = [...selectedRowKeys];\n      childCodes.forEach(code => {\n        if (!newSelectedKeys.includes(code)) {\n          newSelectedKeys.push(code);\n        }\n      });\n      setSelectedRowKeys(newSelectedKeys);\n    } else {\n      // 全不选：移除所有子节点\n      setSelectedRowKeys(selectedRowKeys.filter(key => !childCodes.includes(key)));\n    }\n  };\n\n  // 检查虚拟节点的选中状态\n  const getVirtualNodeCheckedStatus = (record: SchemaTreeItem) => {\n    if (!record.children?.length) return { checked: false, indeterminate: false };\n    \n    const childCodes: string[] = [];\n    const collectChildCodes = (nodes: SchemaTreeItem[]) => {\n      nodes.forEach(node => {\n        if (node.children?.length) {\n          collectChildCodes(node.children);\n        } else {\n          childCodes.push(node.code);\n        }\n      });\n    };\n    collectChildCodes(record.children);\n    \n    const selectedChildCount = childCodes.filter(code => selectedRowKeys.includes(code)).length;\n    \n    if (selectedChildCount === 0) {\n      return { checked: false, indeterminate: false };\n    } else if (selectedChildCount === childCodes.length) {\n      return { checked: true, indeterminate: false };\n    } else {\n      return { checked: false, indeterminate: true };\n    }\n  };\n\n  const schemaColumns = [\n    // 自定义 checkbox 列\n    ...(isSyncMode ? [{\n      title: (\n        <Checkbox\n          checked={isAllSelected}\n          indeterminate={isIndeterminate}\n          onChange={(e) => handleSelectAll(e.target.checked)}\n        />\n      ),\n      key: 'selection',\n      width: 60,\n      fixed: 'left' as const,\n      render: (_: unknown, record: SchemaTreeItem) => {\n        if (record.children?.length) {\n          // 虚拟节点：根据子节点状态显示\n          const status = getVirtualNodeCheckedStatus(record);\n          return (\n            <Checkbox\n              checked={status.checked}\n              indeterminate={status.indeterminate}\n              onChange={(e) => {\n                e.stopPropagation();\n                handleVirtualNodeSelect(record, e.target.checked);\n              }}\n            />\n          );\n        } else {\n          // 叶子节点：正常状态\n          return (\n            <Checkbox\n              checked={selectedRowKeys.includes(record.code)}\n              onChange={(e) => {\n                e.stopPropagation();\n                if (e.target.checked) {\n                  setSelectedRowKeys([...selectedRowKeys, record.code]);\n                } else {\n                  setSelectedRowKeys(selectedRowKeys.filter(key => key !== record.code));\n                }\n              }}\n            />\n          );\n        }\n      },\n    }] : []),\n    {\n      title: 'code',\n      dataIndex: 'code',\n      key: 'code',\n      render: (text: string, record: SchemaTreeItem) => {\n        // 获取当前层级的名称（最后一个冒号后的部分）\n        const currentLevelName = text.split(':').pop() || '';\n        return (\n          <span style={{ color: record.children?.length ? '#999' : undefined }}>\n            {!record.children?.length && <BuildOutlined style={{ fontSize: '12px', marginRight: '8px', color: '#666' }} />}\n            {currentLevelName}\n          </span>\n        );\n      },\n    },\n    {\n      title: '名称',\n      dataIndex: 'name',\n      key: 'name',\n      render: (text: string, record: SchemaTreeItem) => {\n        // 只有叶子节点显示完整信息\n        if (record.children?.length) {\n          return null;\n        }\n        return (\n          <div>\n            <Space>\n                <Badge status={record.isActive ? 'success' : 'default'}/>\n                <span>{text}</span>\n            </Space>\n            {record.description && (\n              <div style={{ color: '#666', fontSize: '12px' }}>\n                {record.description}\n              </div>\n            )}\n          </div>\n        );\n      },\n    },\n    {\n      title: '操作',\n      key: 'action',\n      fixed: 'right' as const,\n      width: 80,\n      render: (_: unknown, record: SchemaTreeItem) => {\n        // 只有叶子节点显示操作按钮\n        if (record.children?.length) return null;\n        return (\n          <Flex justify='end'>\n            <Button\n              type=\"link\"\n              icon={<EditOutlined />}\n              onClick={(e) => {\n                e.stopPropagation();\n                schemaForm.setFieldsValue(record);\n                setIsSchemaModalVisible(true);\n              }}\n            />\n            <Popconfirm\n              title=\"删除数据表\"\n              description={`确定要删除 \"${record.name}\" 吗？此操作不可恢复。`}\n              onConfirm={(e) => {\n                e?.stopPropagation();\n                handleSchemaDelete(record.id!);\n              }}\n              onCancel={(e) => e?.stopPropagation()}\n              okText=\"确定\"\n              cancelText=\"取消\"\n            >\n              <Button\n                type=\"link\"\n                danger\n                icon={<DeleteOutlined />}\n                onClick={(e) => e.stopPropagation()}\n              />\n            </Popconfirm>\n          </Flex>\n        );\n      },\n    },\n  ];\n\n  // 获取字段的索引类型\n  const getFieldIndexType = (fieldName: string) => {\n    if (!selectedSchema?.keyIndexes) return '';\n    \n    // 调试日志\n    console.log(`Checking index type for field: ${fieldName}`, {\n      keyIndexes: selectedSchema.keyIndexes,\n      primaryKey: selectedSchema.keyIndexes.primaryKey,\n      indexes: selectedSchema.keyIndexes.indexes\n    });\n    \n    // 检查是否为主键\n    if (selectedSchema.keyIndexes.primaryKey?.includes(fieldName)) {\n      return 'primary';\n    }\n    \n    // 检查是否为其他索引\n    const index = selectedSchema.keyIndexes.indexes?.find((idx: any) => \n      idx.fields?.includes(fieldName)\n    );\n    \n    const result = index?.type || '';\n    console.log(`Index type result for ${fieldName}:`, result);\n    return result;\n  };\n\n  // 检查字段类型是否适合做主键\n  const isFieldSuitableForPrimaryKey = (field: Field): { suitable: boolean; reason?: string } => {\n    // 不适合做主键的字段类型\n    const unsuitableTypes = ['text', 'media', 'api'];\n    \n    if (unsuitableTypes.includes(field.type)) {\n      return { \n        suitable: false, \n        reason: `${field.type} 类型字段不适合作为主键，因为这种类型通常用于存储大量文本、媒体文件或API数据` \n      };\n    }\n    \n    // 检查日期类型字段\n    if (field.type === 'date') {\n      return { \n        suitable: false, \n        reason: '日期类型字段不适合作为主键，因为日期值可能会重复且不够稳定' \n      };\n    }\n    \n    // 检查枚举类型字段\n    if (field.type === 'enum') {\n      return { \n        suitable: false, \n        reason: '枚举类型字段不适合作为主键，因为枚举值有限且可能重复' \n      };\n    }\n    \n    // 检查关联类型字段\n    if (field.type === 'relation') {\n      return { \n        suitable: false, \n        reason: '关联类型字段不适合作为主键，建议使用关联的目标字段作为主键' \n      };\n    }\n    \n    // 检查布尔类型字段\n    if (field.type === 'boolean') {\n      return { \n        suitable: false, \n        reason: '布尔类型字段不适合作为主键，因为只有两个可能的值，无法唯一标识记录' \n      };\n    }\n    \n    // 适合做主键的字段类型\n    const suitableTypes = ['uuid', 'auto_increment', 'string', 'number'];\n    if (suitableTypes.includes(field.type)) {\n      return { suitable: true };\n    }\n    \n    return { suitable: true };\n  };\n\n  // 检查是否有UUID或自增长字段\n  const hasUuidOrAutoIncrementField = (): boolean => {\n    return selectedSchema?.fields.some(field => \n      field.type === 'uuid' || field.type === 'auto_increment'\n    ) || false;\n  };\n\n  // 处理索引类型变更\n  const handleIndexTypeChange = async (fieldName: string, indexType: string) => {\n    if (!selectedSchema) return;\n    \n    // 获取当前字段\n    const currentField = selectedSchema.fields.find(field => field.name === fieldName);\n    if (!currentField) return;\n    \n    // 如果是设置主键，进行验证\n    if (indexType === 'primary') {\n      // 1. 检查字段类型是否适合做主键\n      const fieldSuitability = isFieldSuitableForPrimaryKey(currentField);\n      if (!fieldSuitability.suitable) {\n        notification.warning({\n          message: '字段类型不适合做主键',\n          description: `字段 \"${fieldName}\" 的类型为 ${currentField.type}。${fieldSuitability.reason}。建议使用 UUID、自增长ID 或字符串类型字段作为主键。`,\n          duration: 5,\n        });\n        // 不阻止保存，只是提醒用户\n      }\n    }\n    \n    // 如果是设置全文索引，进行验证\n    if (indexType === 'fulltext') {\n      // 全文索引只适用于文本类型字段\n      if (currentField.type !== 'text' && currentField.type !== 'string') {\n        notification.warning({\n          message: '字段类型不适合做全文索引',\n          description: `字段 \"${fieldName}\" 的类型为 ${currentField.type}。全文索引只适用于文本类型字段（text、string）。`,\n          duration: 5,\n        });\n        return;\n      }\n    }\n    \n    // 如果是设置空间索引，进行验证\n    if (indexType === 'spatial') {\n      // 空间索引只适用于特定的几何类型字段（这里可以根据需要扩展）\n      if (currentField.type !== 'string') {\n        notification.warning({\n          message: '字段类型不适合做空间索引',\n          description: `字段 \"${fieldName}\" 的类型为 ${currentField.type}。空间索引通常适用于存储几何数据的字段。`,\n          duration: 5,\n        });\n        return;\n      }\n    }\n    \n    // 2. 检查是否已有主键，以及是否有UUID或自增长字段（仅在设置主键时）\n    if (indexType === 'primary') {\n      const currentPrimaryKeys = selectedSchema.keyIndexes?.primaryKey || [];\n      const hasUuidOrAutoIncrement = hasUuidOrAutoIncrementField();\n      \n      if (currentPrimaryKeys.length > 0 && hasUuidOrAutoIncrement) {\n        // 显示确认对话框\n        Modal.confirm({\n          title: '创建联合主键',\n          content: (\n            <div>\n              <p><strong>当前已有主键字段：</strong>{currentPrimaryKeys.join(', ')}</p>\n              <p><strong>要添加的主键字段：</strong>{fieldName}</p>\n              <p style={{ marginTop: '12px', color: '#666' }}>\n                系统中存在 UUID 或自增长字段，通常这些字段更适合作为单一主键。\n                联合主键适用于需要多个字段组合来唯一标识记录的场景。\n              </p>\n              <p style={{ color: '#666' }}>\n                您确定要创建联合主键吗？\n              </p>\n            </div>\n          ),\n          okText: '创建联合主键',\n          cancelText: '取消',\n          width: 500,\n          onOk: () => {\n            updateSchemaKeyIndexes(fieldName, indexType);\n          },\n          onCancel: () => {\n            // 取消操作，不更新\n          }\n        });\n        return;\n      }\n    }\n    \n    // 直接更新索引\n    updateSchemaKeyIndexes(fieldName, indexType);\n  };\n\n  // 更新Schema的keyIndexes\n  const updateSchemaKeyIndexes = async (fieldName: string, indexType: string) => {\n    if (!selectedSchema) return;\n    \n    const updatedSchema = { ...selectedSchema };\n    if (!updatedSchema.keyIndexes) {\n      updatedSchema.keyIndexes = { primaryKey: [], indexes: [] };\n    }\n    \n    // 移除字段的所有现有索引\n    if (updatedSchema.keyIndexes.primaryKey) {\n      updatedSchema.keyIndexes.primaryKey = updatedSchema.keyIndexes.primaryKey.filter(\n        field => field !== fieldName\n      );\n    }\n    \n    if (updatedSchema.keyIndexes.indexes) {\n      updatedSchema.keyIndexes.indexes = updatedSchema.keyIndexes.indexes.filter(\n        index => !index.fields?.includes(fieldName)\n      );\n    }\n    \n    // 添加新的索引类型\n    if (indexType === 'primary') {\n      if (!updatedSchema.keyIndexes.primaryKey) {\n        updatedSchema.keyIndexes.primaryKey = [];\n      }\n      updatedSchema.keyIndexes.primaryKey.push(fieldName);\n    } else if (['unique', 'index', 'fulltext', 'spatial'].includes(indexType)) {\n      if (!updatedSchema.keyIndexes.indexes) {\n        updatedSchema.keyIndexes.indexes = [];\n      }\n      updatedSchema.keyIndexes.indexes.push({\n        name: `${fieldName}_${indexType}`,\n        fields: [fieldName],\n        type: indexType as 'unique' | 'index' | 'fulltext' | 'spatial'\n      });\n    }\n    \n    try {\n      await putSchemasId({\n        id: selectedSchema.id!\n      }, {\n        name: updatedSchema.name,\n        description: updatedSchema.description,\n        fields: updatedSchema.fields as any,\n        keyIndexes: updatedSchema.keyIndexes\n      } as any);\n      \n      // 更新本地状态\n      setSelectedSchema(updatedSchema);\n      setSchemas(prevSchemas => \n        prevSchemas.map(schema => \n          schema.id === selectedSchema.id ? updatedSchema : schema\n        )\n      );\n      \n      message.success('索引设置已更新');\n    } catch (error) {\n      message.error('更新索引设置失败');\n      console.error('更新索引设置失败:', error);\n    }\n  };\n\n  const renderFieldList = () => {\n    if (!selectedSchema) {\n      return (\n        <div className=\"d-flex mt-5 pt-5 flex-column align-items-center justify-content-center\">\n          <img src=\"/toleft.svg\" alt=\"empty\" style={{ width: '100px', height: '100px' }} />\n          <p style={{ textAlign: 'center', padding: '5px' }}>请选择左侧的数据表</p>\n        </div>\n      );\n    }\n\n    // 获取关系类型显示文本\n    const getRelationTypeText = (field: ExtendedRelationField) => {\n      const type = field.relationType || (field.relationConfig?.multiple ? 'oneToMany' : 'oneToOne');\n      switch (type) {\n        case 'oneToOne': return '1:1';\n        case 'oneToMany': return '1:n';\n        case 'manyToOne': return 'n:1';\n        case 'manyToMany': return 'm:n';\n        default: return '1:1';\n      }\n    };\n\n    // 获取目标数据表的描述信息\n    const getTargetSchemaDescription = (code: string | undefined) => {\n      if (!code) return '';\n      const schema = schemas.find(s => s.code === code);\n      return schema ? `${code}（${schema.name}）` : code;\n    };\n\n    // 获取枚举的描述信息\n    const getEnumDescription = (enumCode: string | undefined) => {\n      if (!enumCode) return '';\n      const enumItem = enums.find(e => e.code === enumCode);\n      if (!enumItem) return enumCode;\n      // 将冒号分隔的路径转换为斜杠分隔\n      const path = enumItem.code.replace(/:/g, ' / ');\n      return `${path}（${enumItem.description || enumItem.name}）`;\n    };\n\n    return (\n      <div style={{ padding: '16px' }}>\n        <List\n          dataSource={selectedSchema.fields}\n          size=\"small\"\n          renderItem={(field: Field, index: number) => (\n            <List.Item\n              key={field.id || index}\n              className=\"px-0\"\n              actions={[\n                <Select\n                  key=\"index\"\n                  size=\"small\"\n                  style={{ width: 100 }}\n                  placeholder=\"索引类型\"\n                  value={getFieldIndexType(field.name)}\n                  onChange={(value) => handleIndexTypeChange(field.name, value)}\n                  allowClear\n                >\n                  <Option value=\"primary\">主键</Option>\n                  <Option value=\"unique\">唯一索引</Option>\n                  <Option value=\"index\">普通索引</Option>\n                  <Option value=\"fulltext\">全文索引</Option>\n                  <Option value=\"spatial\">空间索引</Option>\n                </Select>,\n                <Button\n                  key=\"edit\"\n                  type=\"link\"\n                  icon={<EditOutlined />}\n                  shape='circle'\n                  onClick={() => {\n                    handleEditField(field);\n                  }}\n                />,\n                <Popconfirm\n                  key=\"delete\"\n                  title=\"删除字段\"\n                  description={`确定要删除字段 \"${field.name}\" 吗？此操作不可恢复。`}\n                  onConfirm={() => handleFieldDelete(index)}\n                  okText=\"确定\"\n                  cancelText=\"取消\"\n                >\n                  <Button\n                    type=\"link\"\n                    shape='circle'\n                    danger\n                    icon={<DeleteOutlined />}\n                  />\n                </Popconfirm>,\n              ]}\n            >\n              <List.Item.Meta\n                title={\n                  <Space>\n                    <span>{field.name}</span>\n                    {field.description && <span>({field.description})</span>}\n                    <Tag color=\"blue\">{field.type}</Tag>\n                    {/* 主键标识 - 暂时注释，等待前端更新 */}\n                    {/* {(field.type === 'uuid' || field.type === 'auto_increment') && field.isPrimaryKey && (\n                      <Tag color=\"red\">PK</Tag>\n                    )} */}\n                  </Space>\n                }\n                description={\n                  <div style={{ marginTop: '4px' }}>\n                    {/* 必填 */}\n                    {field.required && <Tag color=\"cyan\" bordered={false}>必填</Tag>}\n                    {/* 索引状态 */}\n                    {getFieldIndexType(field.name) === 'primary' && (\n                      <Tag color=\"red\" bordered={false}>主键</Tag>\n                    )}\n                    {getFieldIndexType(field.name) === 'unique' && (\n                      <Tag color=\"orange\" bordered={false}>唯一索引</Tag>\n                    )}\n                    {getFieldIndexType(field.name) === 'index' && (\n                      <Tag color=\"green\" bordered={false}>普通索引</Tag>\n                    )}\n                    {getFieldIndexType(field.name) === 'fulltext' && (\n                      <Tag color=\"purple\" bordered={false}>全文索引</Tag>\n                    )}\n                    {getFieldIndexType(field.name) === 'spatial' && (\n                      <Tag color=\"blue\" bordered={false}>空间索引</Tag>\n                    )}\n                    {/* 长度 */}\n                    {field.type === 'string' && (field as API.StringField).length && (\n                      <Tag color=\"cyan\" bordered={false}>\n                        VARCHAR({(field as API.StringField).length})\n                      </Tag>\n                    )}\n                    {/* 长文本 */}\n                    {field.type === 'text' && (\n                      <Tag color=\"cyan\" bordered={false}>\n                        TEXT\n                      </Tag>\n                    )}\n                    {/* 日期 */}\n                    {field.type === 'date' && (field as API.DateField).dateType && (\n                      <Tag color=\"cyan\" bordered={false}>{(field as API.DateField).dateType}</Tag>\n                    )}\n                    {/* 枚举 */}\n                    {field.type === 'enum' && (field as API.EnumField).enumConfig && (\n                      <>\n                        <Tag color=\"cyan\" bordered={false}>\n                          枚举: {getEnumDescription((field as API.EnumField).enumConfig?.targetEnumCode)}\n                        </Tag>\n                        {(field as API.EnumField).enumConfig?.multiple && (\n                          <Tag color=\"purple\" bordered={false}>允许多选</Tag>\n                        )}\n                      </>\n                    )}\n                    {/* 关联 */}\n                    {field.type === 'relation' && (field as API.RelationField).relationConfig && (\n                      <>\n                        <Tag color=\"cyan\" bordered={false}>\n                          {getRelationTypeText(field as ExtendedRelationField)}\n                        </Tag>\n                        <Tag color=\"cyan\" bordered={false}>\n                          关联: {getTargetSchemaDescription((field as API.RelationField).relationConfig?.targetSchemaCode)}\n                        </Tag>\n                      </>\n                    )}\n                    {/* 媒体 */}\n                    {field.type === 'media' && (field as API.MediaField).mediaConfig && (\n                      <Tag color=\"cyan\" bordered={false}>媒体类型: {(field as API.MediaField).mediaConfig?.mediaType}</Tag>\n                    )}\n                    {/* API */}\n                    {field.type === 'api' && (field as API.ApiField).apiConfig && (\n                      <Tag color=\"cyan\" bordered={false}>API: {(field as API.ApiField).apiConfig?.endpoint}</Tag>\n                    )}\n                    {/* 数字类型 */}\n                    {field.type === 'number' && (\n                      <Tag color=\"cyan\" bordered={false}>数字</Tag>\n                    )}\n                  </div>\n                }\n              />\n            </List.Item>\n          )}\n        />\n      </div>\n    );\n  };\n\n  // 树选择器的搜索过滤函数\n  const treeFilter = (inputValue: string, node: any) => {\n    return node.title.toLowerCase().includes(inputValue.toLowerCase()) ||\n           node.value.toLowerCase().includes(inputValue.toLowerCase());\n  };\n\n  // 级联选择器的变更处理函数\n  const handleEnumChange: CascaderProps<EnumTreeNode>['onChange'] = (_, selectedOptions) => {\n    if (selectedOptions && selectedOptions.length > 0) {\n      const lastOption = selectedOptions[selectedOptions.length - 1];\n      if (lastOption.isLeaf && lastOption.rawEnum) {\n        const selectedEnum = lastOption.rawEnum;\n        setSelectedEnumId(selectedEnum.code);\n        setEnumDisplayText(`${selectedEnum.code}（${selectedEnum.description || selectedEnum.name}）`);\n        fieldForm.setFieldValue('targetEnumCode', selectedEnum.code);\n      }\n    }\n  };\n\n  // 级联选择器的搜索过滤函数\n  const enumFilter = (inputValue: string, path: DefaultOptionType[]) => {\n    return path.some(option => {\n      const label = option.label as string;\n      const value = option.value as string;\n      const searchStr = inputValue.toLowerCase();\n      return (\n        label.toLowerCase().includes(searchStr) ||\n        value.toLowerCase().includes(searchStr)\n      );\n    });\n  };\n\n  // 处理树节点禁用逻辑\n  const processTreeData = (nodes: SchemaTreeItem[], currentCode: string): SchemaTreeItem[] => {\n    return nodes.map(node => {\n      const newNode = { ...node };\n      // 如果节点的值与当前数据表的代码相同，则禁用该节点\n      if (newNode.code === currentCode) {\n        newNode.disabled = true;\n      }\n      // 如果有子节点，递归处理\n      if (newNode.children) {\n        newNode.children = processTreeData(newNode.children, currentCode);\n      }\n      return newNode;\n    });\n  };\n\n  // 在编辑字段时设置选中路径和显示文本\n  useEffect(() => {\n    if (editingField && editingField.type === 'enum' && editingField.enumConfig) {\n      const selectedEnum = enums.find(e => e.code === editingField.enumConfig?.targetEnumCode);\n      if (selectedEnum) {\n        setSelectedEnumId(selectedEnum.code);\n        setEnumDisplayText(`${selectedEnum.code}（${selectedEnum.description || selectedEnum.name}）`);\n      }\n    }\n  }, [editingField, enums]);\n\n  // 处理字段编辑时的表单数据设置\n  const handleEditField = (field: Field) => {\n    setEditingField(field);\n    \n    // 设置字段类型状态，确保表单能正确显示对应的配置项\n    setFieldType(field.type);\n    \n    // 设置基础字段值\n    const formData: any = {\n      name: field.name,\n      type: field.type,\n      description: field.description,\n      required: field.required,\n      // isPrimaryKey: field.isPrimaryKey, // 暂时注释，等待前端更新\n      length: field.length,\n      dateType: field.dateType\n    };\n\n    // 根据字段类型设置特定的配置\n    switch (field.type) {\n      case 'enum':\n        if (field.enumConfig) {\n          formData.targetEnumCode = field.enumConfig.targetEnumCode;\n          formData.multiple = field.enumConfig.multiple;\n          formData.defaultValues = field.enumConfig.defaultValues;\n        }\n        break;\n      case 'relation':\n        if (field.relationConfig) {\n          formData.targetSchema = field.relationConfig.targetSchemaCode;\n          formData.targetField = field.relationConfig.targetField;\n          formData.cascadeDelete = field.relationConfig.cascadeDelete;\n          formData.displayFields = field.relationConfig.displayFields;\n          // 根据multiple设置relationType\n          if (field.relationConfig.multiple) {\n            formData.relationType = 'oneToMany';\n          } else {\n            formData.relationType = 'oneToOne';\n          }\n        }\n        break;\n      case 'media':\n        if (field.mediaConfig) {\n          formData.mediaConfig = field.mediaConfig;\n        }\n        break;\n      case 'api':\n        if (field.apiConfig) {\n          formData.apiConfig = field.apiConfig;\n        }\n        break;\n    }\n\n    fieldForm.setFieldsValue(formData);\n    setIsFieldModalVisible(true);\n  };\n\n  return (\n    <div className=\"f-fullscreen\">\n      <Splitter style={{ height: \"calc(100vh - 57px)\" }}>\n        <Splitter.Panel defaultSize=\"50%\">\n          <div className=\"f-header\">\n            <label className=\"fw-bold\">模型表</label>\n            <Space>\n              <Button\n                type={isSyncMode ? \"primary\" : \"link\"}\n                ghost={!isSyncMode}\n                icon={<ExportOutlined />}\n                onClick={handleSyncModeToggle}\n              >\n                {isSyncMode ? \"取消导出模型\" : \"导出模型\"}\n              </Button>\n              <Button\n                type=\"link\"\n                ghost\n                icon={<ApartmentOutlined />}\n                onClick={() => {\n                  navigate('/schema-graph');\n                }}\n              >\n                图谱\n              </Button>\n              <Button\n                type=\"primary\"\n                ghost\n                icon={<PlusOutlined />}\n                onClick={() => {\n                  schemaForm.resetFields();\n                  setIsSchemaModalVisible(true);\n                }}\n              >\n                新建表\n              </Button>\n            </Space>\n            \n          </div>\n          <div\n            className=\"pos-relative overflow-y\"\n            style={{ height: `calc(100% - ${isSyncMode ? '106px' : '50px'})` }}\n          >\n            <div className=\"pb-4\">\n              <Table\n                columns={schemaColumns}\n                dataSource={schemaTreeData}\n                rowKey=\"code\"\n                loading={loading}\n                pagination={false}\n                showHeader={false}\n                size=\"small\"\n                expandable={{\n                  expandedRowKeys,\n                  onExpandedRowsChange: (expandedRows) => {\n                    setExpandedRowKeys(expandedRows as string[]);\n                  },\n                  childrenColumnName: \"children\",\n                  indentSize: 20,\n                  expandIcon: ({ expanded, onExpand, record }) => {\n                    // 如果是叶子节点（没有子节点），不显示图标\n                    if (!record.children?.length) {\n                      return null;\n                    }\n                    return (\n                      <span \n                        onClick={(e) => {\n                          e.stopPropagation();\n                          onExpand(record, e);\n                        }}\n                        style={{ cursor: 'pointer' }}\n                      >\n                        {expanded ? <CaretDownOutlined style={{ fontSize: '12px', color: '#666', marginRight: '6px' }} /> : <CaretRightOutlined style={{ fontSize: '12px', color: '#999', marginRight: '6px', marginTop: '2px' }} />}\n                      </span>\n                    );\n                  },\n                }}\n                onRow={(record: any) => ({\n                  onClick: (e) => {\n                    // 检查是否点击的是 checkbox 列\n                    const target = e.target as HTMLElement;\n                    const checkboxCell = target.closest('td');\n                    if (checkboxCell && checkboxCell.cellIndex === 0 && isSyncMode) {\n                      // 点击的是 checkbox 列，不处理\n                      return;\n                    }\n                    \n                    if (record.children?.length) {\n                      // 虚拟节点：点击整行展开/折叠\n                      const isExpanded = expandedRowKeys.includes(record.code);\n                      if (isExpanded) {\n                        setExpandedRowKeys(expandedRowKeys.filter(key => key !== record.code));\n                      } else {\n                        setExpandedRowKeys([...expandedRowKeys, record.code]);\n                      }\n                    } else {\n                      // 叶子节点：选中数据表\n                      handleSchemaSelect(record as SchemaListItem);\n                    }\n                  },\n                  className:\n                    !record.children?.length && selectedSchema?.id === record.id\n                      ? \"ant-table-row-selected\"\n                      : \"\",\n                  style: {\n                    cursor: \"pointer\",\n                  },\n                })}\n              />\n            </div>\n          </div>\n          {/* 底部操作面板 */}\n          {isSyncMode && (\n            <div \n              style={{ \n                position: 'fixed', \n                bottom: 0, \n                left: 0, \n                width: '100%',\n                background: 'rgb(38 105 191 / 17%)',\n                borderTop: '1px solid rgb(240 240 240 / 5%)',\n                padding: '12px 16px',\n                display: 'flex',\n                justifyContent: 'space-between',\n                backdropFilter: 'blur(10px)',\n                alignItems: 'center',\n                zIndex: 1000\n              }}\n            >\n              <Space>\n                <Checkbox\n                  checked={isAllSelected}\n                  indeterminate={isIndeterminate}\n                  onChange={(e) => handleSelectAll(e.target.checked)}\n                >\n                  全选\n                </Checkbox>\n                <span>已选择 {selectedRowKeys.length} 个数据表</span>\n              </Space>\n              <Button\n                type=\"primary\"\n                icon={<CloudDownloadOutlined />}\n                onClick={handleDownloadORMClick}\n                disabled={selectedRowKeys.length === 0}\n              >\n                导出Prisma模型\n              </Button>\n            </div>\n          )}\n        </Splitter.Panel>\n        <Splitter.Panel>\n          {\n            selectedSchema && (\n              <div className=\"f-header\">\n                <Space>\n                  <span className='fw-bold'>{selectedSchema?.name}</span>\n                  { selectedSchema?.description && <span className='me-1'>({selectedSchema?.description})</span> }\n                  <span className='fw-bold me-2'> 的数据表字段</span>\n                  <SchemaValidator\n                    fields={selectedSchema?.fields ?? []}\n                    schemas={schemas}\n                  />\n                </Space>\n                <Tooltip title=\"新建字段\">\n                  <Button\n                    type=\"primary\"\n                    icon={<PlusOutlined />}\n                    shape=\"circle\"\n                    ghost={true}\n                    size=\"small\"\n                    onClick={() => {\n                      setEditingField(null);\n                      fieldForm.resetFields();\n                      setIsFieldModalVisible(true);\n                    }}\n                  />\n                </Tooltip>\n              </div>\n            )\n          }\n          <div\n            className=\"pos-relative overflow-y\"\n            style={{ height: \"calc( 100% - 50px)\" }}\n          >\n            <div className=\"pb-4\">{renderFieldList()}</div>\n          </div>\n        </Splitter.Panel>\n      </Splitter>\n\n      {/* 数据表创建/编辑模态框 */}\n      <Modal\n        title={selectedSchema ? \"编辑数据表\" : \"新建数据表\"}\n        open={isSchemaModalVisible}\n        onOk={() => schemaForm.submit()}\n        onCancel={() => setIsSchemaModalVisible(false)}\n      >\n        <Form form={schemaForm} layout=\"vertical\" onFinish={handleSchemaCreate}>\n          <Form.Item\n            name=\"name\"\n            label=\"名称\"\n            rules={[\n              { required: true, message: \"请输入名称\" },\n              {\n                pattern: /^[a-z][a-z0-9_]*$/,\n                message:\n                  \"名称必须以小写字母开头，只能包含小写字母、数字和下划线\",\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            name=\"code\"\n            label=\"代码\"\n            rules={[\n              { required: true, message: \"请输入代码\" },\n              {\n                pattern: /^[a-zA-Z][a-zA-Z0-9_:]*$/,\n                message: \"代码必须以字母开头，只能包含字母、数字、下划线和冒号\",\n              },\n            ]}\n          >\n            <Input placeholder=\"例如：system:user\" />\n          </Form.Item>\n          <Form.Item name=\"description\" label=\"描述\">\n            <Input.TextArea />\n          </Form.Item>\n          <Form.Item\n            name=\"isActive\"\n            label=\"状态\"\n            valuePropName=\"checked\"\n            initialValue={true}\n          >\n            <Switch checkedChildren=\"启用\" unCheckedChildren=\"禁用\" />\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* 字段创建/编辑模态框 */}\n      <Modal\n        title={editingField ? \"编辑字段\" : \"新建字段\"}\n        open={isFieldModalVisible}\n        onOk={() => fieldForm.submit()}\n        onCancel={() => {\n          setIsFieldModalVisible(false);\n          setFieldType(\"\");\n          fieldForm.resetFields();\n        }}\n        width={720}\n      >\n        <Form\n          form={fieldForm}\n          layout=\"horizontal\"\n          labelCol={{ span: 6 }}\n          wrapperCol={{ span: 16 }}\n          onFinish={(values: any) => {\n            if (editingField) {\n              const index =\n                selectedSchema?.fields.findIndex(\n                  (f) => f.id === editingField.id\n                ) ?? -1;\n              if (index !== -1) {\n                handleFieldEdit(values, index);\n              }\n            } else {\n              handleFieldCreate(values);\n            }\n          }}\n        >\n          <Form.Item\n            name=\"type\"\n            label=\"类型\"\n            rules={[{ required: true, message: '请选择类型' }]}\n          >\n            <Select onChange={(value: any) => {\n              // 当类型改变时，重置相关字段\n              fieldForm.resetFields(['length', 'dateType', 'enumConfig', 'relationConfig', 'mediaConfig', 'apiConfig']);\n              setFieldType(value);\n              setNumberType('');\n            }}>\n              {fieldTypes.map(type => (\n                <Option key={type.value} value={type.value}>{type.label}</Option>\n              ))}\n            </Select>\n          </Form.Item>\n\n          <Form.Item\n            name=\"name\"\n            label=\"字段名\"\n            rules={[{ validator: validateFieldName }]}\n          >\n            <Input placeholder=\"请输入字段名，必须以小写字母开头\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"description\"\n            label=\"描述\"\n          >\n            <Input placeholder=\"请输入字段描述\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"required\"\n            valuePropName=\"checked\"\n            label=\"是否必填\"\n          >\n            <Switch />\n          </Form.Item>\n\n          {/* UUID和自增长ID类型特有的配置 - 暂时注释，等待前端更新 */}\n          {/* {(fieldType === 'uuid' || fieldType === 'auto_increment') && (\n            <Form.Item\n              name=\"isPrimaryKey\"\n              valuePropName=\"checked\"\n              label=\"是否主键\"\n            >\n              <Switch />\n            </Form.Item>\n          )} */}\n\n          {/* 普通字段的通用配置（排除UUID和自增长ID） */}\n          {!['uuid', 'auto_increment'].includes(fieldType) && (\n            <>\n              {/* 字符串类型特有的配置 */}\n              {fieldType === 'string' && (\n                <Form.Item\n                  name=\"length\"\n                  label=\"长度\"\n                  rules={[{ required: true, message: '请输入字符串长度' }]}\n                >\n                  <InputNumber min={1} max={255} />\n                </Form.Item>\n              )}\n\n              {/* 数字类型特有的配置 */}\n              {fieldType === 'number' && (\n                <>\n                  <Form.Item\n                    name=\"numberType\"\n                    label=\"数字类型\"\n                    rules={[{ required: true, message: '请选择数字类型' }]}\n                  >\n                    <Select onChange={(value: any) => {\n                      setNumberType(value);\n                      if (value === 'integer') {\n                        fieldForm.setFieldsValue({ precision: undefined, scale: undefined });\n                      }\n                    }}>\n                      <Option value=\"integer\">整数</Option>\n                      <Option value=\"float\">浮点数</Option>\n                      <Option value=\"decimal\">精确小数</Option>\n                    </Select>\n                  </Form.Item>\n                  {(numberType === 'float' || numberType === 'decimal') && (\n                    <>\n                      <Form.Item\n                        name=\"precision\"\n                        label=\"精度\"\n                        tooltip=\"数字的总位数，包括整数部分和小数部分\"\n                        rules={[{ required: true, message: '请输入精度' }]}\n                      >\n                        <InputNumber min={1} max={65} />\n                      </Form.Item>\n                      <Form.Item\n                        name=\"scale\"\n                        label=\"小数位数\"\n                        tooltip=\"小数点后的位数，必须小于精度\"\n                        rules={[\n                          { required: true, message: '请输入小数位数' },\n                          ({ getFieldValue }) => ({\n                            validator(_, value) {\n                              const precision = getFieldValue('precision');\n                              if (value > precision) {\n                                return Promise.reject('小数位数不能大于精度');\n                              }\n                              return Promise.resolve();\n                            },\n                          }),\n                        ]}\n                      >\n                        <InputNumber min={0} max={30} />\n                      </Form.Item>\n                    </>\n                  )}\n                </>\n              )}\n\n              {/* 日期类型特有的配置 */}\n              {fieldType === 'date' && (\n                <Form.Item\n                  name=\"dateType\"\n                  label=\"日期格式\"\n                  rules={[{ required: true, message: '请选择日期格式' }]}\n                >\n                  <Select>\n                    <Option value=\"year\">年</Option>\n                    <Option value=\"year-month\">年月</Option>\n                    <Option value=\"date\">年月日</Option>\n                    <Option value=\"datetime\">年月日时间</Option>\n                  </Select>\n                </Form.Item>\n              )}\n\n              {/* 枚举类型特有的配置 */}\n              {fieldType === 'enum' && (\n                <>\n                  <Form.Item\n                    name=\"targetEnumCode\"\n                    label=\"选择枚举\"\n                    rules={[{ required: true, message: '请选择枚举' }]}\n                  >\n                    <div>\n                      <span style={{ marginRight: 8 }}>{enumDisplayText || '未选择'}</span>\n                      <Cascader<EnumTreeNode>\n                        options={enumTreeData}\n                        onChange={handleEnumChange}\n                        placeholder=\"请选择枚举\"\n                        showSearch={{ filter: enumFilter }}\n                      >\n                        <a>选择枚举</a>\n                      </Cascader>\n                    </div>\n                  </Form.Item>\n                  <Form.Item\n                    name=\"multiple\"\n                    valuePropName=\"checked\"\n                    label=\"允许多选\"\n                  >\n                    <Switch />\n                  </Form.Item>\n                </>\n              )}\n\n              {/* 关联类型特有的配置 */}\n              {fieldType === 'relation' && (\n                <>\n                  <Form.Item\n                    name=\"relationType\"\n                    label=\"关系类型\"\n                    rules={[{ required: true, message: '请选择关系类型' }]}\n                    tooltip={{\n                      title: (\n                        <div>\n                          <p>一对一：每条记录只能关联一条目标记录（如：用户-用户详情）</p>\n                          <p>一对多：每条记录可以关联多条目标记录（如：部门-员工）</p>\n                          <p>多对一：多条记录可以关联同一条目标记录（如：员工-部门）</p>\n                          <p>多对多：双向多条记录关联（如：用户-角色）</p>\n                        </div>\n                      ),\n                    }}\n                  >\n                    <Select>\n                      <Option value=\"oneToOne\">一对一 (1:1)</Option>\n                      <Option value=\"oneToMany\">一对多 (1:n)</Option>\n                      <Option value=\"manyToOne\">多对一 (n:1)</Option>\n                      <Option value=\"manyToMany\">多对多 (m:n)</Option>\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"targetSchema\"\n                    label=\"目标数据表\"\n                    rules={[{ required: true, message: '请选择目标数据表' }]}\n                    tooltip={{\n                      title: '不能选择当前正在编辑的数据表作为关联目标'\n                    }}\n                  >\n                    <TreeSelect\n                      treeData={processTreeData(schemaTreeData, selectedSchema?.code || '').map(node => ({\n                        title: node.name,\n                        value: node.code,\n                        disabled: node.disabled,\n                        children: node.children?.map(child => ({\n                          title: child.name,\n                          value: child.code,\n                          disabled: child.disabled,\n                          children: child.children?.map(grandChild => ({\n                            title: grandChild.name,\n                            value: grandChild.code,\n                            disabled: grandChild.disabled,\n                            isLeaf: !grandChild.children?.length\n                          }))\n                        }))\n                      }))}\n                      placeholder=\"请选择目标数据表\"\n                      allowClear\n                      showSearch\n                      treeNodeFilterProp=\"title\"\n                      filterTreeNode={treeFilter}\n                      treeDefaultExpandAll\n                      onChange={(value) => {\n                        console.log('选择的目标数据表:', value);\n                        // 清空关联字段的选择\n                        fieldForm.setFieldValue('targetField', undefined);\n                      }}\n                    />\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"targetField\"\n                    label=\"关联字段\"\n                    tooltip={{\n                      title: (\n                        <div>\n                          <p>选择目标数据表中用于关联的字段</p>\n                          <p>- 默认使用主键（id 字段）</p>\n                          <p>- 也可以选择其他唯一标识字段（如：商品编码、员工工号等）</p>\n                          <p>- 支持字符串和数字类型的字段</p>\n                        </div>\n                      ),\n                    }}\n                  >\n                    <Select\n                      placeholder=\"请选择关联字段\"\n                      allowClear\n                      showSearch\n                    >\n                      {schemas.find(s => s.code === fieldForm.getFieldValue('targetSchema'))?.fields.map(field => (\n                        <Option \n                          key={field.name} \n                          value={field.name}\n                          disabled={!isValidRelationField(field)}\n                        >\n                          {field.name}\n                          {field.description ? ` (${field.description})` : ''}\n                          {/* {isPrimaryKeyField(field) ? ' [主键]' : ''} */}\n                        </Option>\n                      ))}\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item\n                    name=\"cascadeDelete\"\n                    label=\"关联删除策略\"\n                    rules={[{ required: true, message: '请选择关联删除策略' }]}\n                    tooltip={{\n                      title: (\n                        <div>\n                          <p>限制删除：如果存在关联记录，则禁止删除</p>\n                          <p>级联删除：删除时同时删除关联记录</p>\n                          <p>设置为空：删除时将关联记录的关联字段设为空</p>\n                        </div>\n                      ),\n                    }}\n                  >\n                    <Select>\n                      <Option value=\"restrict\">限制删除</Option>\n                      <Option value=\"cascade\">级联删除</Option>\n                      <Option value=\"setNull\">设置为空</Option>\n                    </Select>\n                  </Form.Item>\n                </>\n              )}\n\n              {/* 媒体类型特有的配置 */}\n              {fieldType === 'media' && (\n                <>\n                  <Form.Item\n                    name={['mediaConfig', 'mediaType']}\n                    label=\"媒体类型\"\n                    rules={[{ required: true, message: '请选择媒体类型' }]}\n                  >\n                    <Select>\n                      <Option value=\"image\">图片</Option>\n                      <Option value=\"video\">视频</Option>\n                      <Option value=\"audio\">音频</Option>\n                      <Option value=\"document\">文档</Option>\n                      <Option value=\"file\">文件</Option>\n                    </Select>\n                  </Form.Item>\n                  <Form.Item\n                    name={['mediaConfig', 'multiple']}\n                    valuePropName=\"checked\"\n                    label=\"允许多选\"\n                  >\n                    <Switch />\n                  </Form.Item>\n                  <Form.Item\n                    name={['mediaConfig', 'maxSize']}\n                    label=\"最大文件大小(MB)\"\n                  >\n                    <InputNumber min={1} />\n                  </Form.Item>\n                  <Form.Item\n                    name={['mediaConfig', 'formats']}\n                    label=\"允许的文件格式\"\n                  >\n                    <Select mode=\"tags\" placeholder=\"请输入允许的文件格式，如: jpg, png\">\n                      <Option value=\"jpg\">jpg</Option>\n                      <Option value=\"png\">png</Option>\n                      <Option value=\"pdf\">pdf</Option>\n                      <Option value=\"doc\">doc</Option>\n                      <Option value=\"docx\">docx</Option>\n                    </Select>\n                  </Form.Item>\n                </>\n              )}\n\n              {/* API类型特有的配置 */}\n              {fieldType === 'api' && (\n                <>\n                  <Form.Item\n                    name={['apiConfig', 'endpoint']}\n                    label=\"API接口地址\"\n                    rules={[{ required: true, message: '请输入API接口地址' }]}\n                  >\n                    <Input placeholder=\"请输入API接口地址\" />\n                  </Form.Item>\n                  <Form.Item\n                    name={['apiConfig', 'method']}\n                    label=\"请求方法\"\n                    rules={[{ required: true, message: '请选择请求方法' }]}\n                  >\n                    <Select>\n                      <Option value=\"GET\">GET</Option>\n                      <Option value=\"POST\">POST</Option>\n                      <Option value=\"PUT\">PUT</Option>\n                      <Option value=\"DELETE\">DELETE</Option>\n                    </Select>\n                  </Form.Item>\n                  <Form.Item\n                    name={['apiConfig', 'multiple']}\n                    valuePropName=\"checked\"\n                    label=\"允许多选\"\n                  >\n                    <Switch />\n                  </Form.Item>\n                </>\n              )}\n            </>\n          )}\n        </Form>\n      </Modal>\n\n      {/* 枚举选择模态框 */}\n      <Modal\n        title=\"选择枚举\"\n        open={isEnumModalVisible}\n        onOk={() => {\n          if (selectedEnumId) {\n            fieldForm.setFieldValue(\"targetEnumCode\", selectedEnumId);\n            setIsEnumModalVisible(false);\n          } else {\n            message.warning(\"请选择一个枚举\");\n          }\n        }}\n        onCancel={() => {\n          setIsEnumModalVisible(false);\n          setEnumSearchValue(\"\");\n        }}\n        width={720}\n      >\n        <Input.Search\n          placeholder=\"搜索枚举\"\n          value={enumSearchValue}\n          onChange={(e) => setEnumSearchValue(e.target.value)}\n          style={{ marginBottom: 16 }}\n        />\n        <List\n          dataSource={filteredEnums}\n          size=\"small\"\n          renderItem={(item: any) => (\n            <List.Item\n              onClick={() => setSelectedEnumId(item.code)}\n              style={{\n                cursor: \"pointer\",\n                backgroundColor:\n                  selectedEnumId === item.code ? \"#e6f7ff\" : undefined,\n              }}\n            >\n              <List.Item.Meta\n                title={\n                  <Space>\n                    <span>{item.name}</span>\n                    <Tag color=\"blue\">{item.code}</Tag>\n                    {!item.isActive && <Tag color=\"red\">已禁用</Tag>}\n                  </Space>\n                }\n                description={item.description}\n              />\n              <div>\n                {item.options?.map((option: any) => (\n                  <Tag key={option.value}>{option.label}</Tag>\n                ))}\n              </div>\n            </List.Item>\n          )}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nexport default SchemaManagement; ",
      "__isJSFile": true,
      "__absFile": "/Users/yanfang/MOM/BDC/frontend/src/pages/SchemaManagement/index.tsx"
    },
    "5": {
      "path": "/database-management",
      "name": "数据库管理",
      "icon": "DatabaseOutlined",
      "file": "@/pages/DatabaseManagement/index.tsx",
      "parentId": "ant-design-pro-layout",
      "id": "5",
      "absPath": "/database-management",
      "__content": "import React, { useState, useEffect } from 'react';\nimport { Table, Button, Space, Tag, message, Modal, Form, Input, Select, List, Flex, InputNumber, Badge, Popconfirm, Card, Descriptions, Timeline, Checkbox, Divider, Tree, Tabs, Splitter } from 'antd';\nimport { PlusOutlined, EditOutlined, DeleteOutlined, CheckCircleOutlined, CloseCircleOutlined, SyncOutlined, DatabaseOutlined, ClockCircleOutlined, CloudServerOutlined } from '@ant-design/icons';\nimport { getDatabaseConnections, postDatabaseConnections, deleteDatabaseConnectionsId, postDatabaseConnectionsIdTest, putDatabaseConnectionsId } from '@/services/BDC/api/databaseConnections';\nimport { postMaterializeTables } from '@/services/BDC/api/materializeTables';\nimport { getSchemas } from '@/services/BDC/api/schemaManagement';\nimport { buildTree } from '@/utils/treeBuilder';\nimport DatabaseTables from '@/components/DatabaseTables';\n\nconst { Option } = Select;\n\ninterface SyncRecord {\n  id: string;\n  connectionId: string;\n  connectionName: string;\n  operation: 'create' | 'update' | 'delete' | 'test' | 'materialize';\n  status: 'success' | 'failed' | 'pending';\n  message: string;\n  timestamp: string;\n  details?: any;\n  failureDetails?: string;\n}\n\ninterface SchemaListItem {\n  id?: string;\n  name: string;\n  code: string;\n  description?: string;\n  isActive?: boolean;\n  version?: number;\n  createdAt?: string;\n  updatedAt?: string;\n  fields: any[];\n}\n\n// 表结构树构建配置\nconst schemaTreeConfig = {\n  getLabel: (item: SchemaListItem, part: string, isLeaf: boolean) => {\n    return isLeaf ? `${part}（${item?.description || ''}）` : part;\n  },\n  buildExtraProps: (item: SchemaListItem, path: string, isLeaf: boolean) => ({\n    rawSchema: isLeaf ? item : undefined,\n    fields: isLeaf ? item?.fields : undefined,\n    key: path // 确保每个节点都有唯一的key\n  }),\n  getIsActive: (item: SchemaListItem, isLeaf: boolean) => isLeaf ? !!item?.isActive : true\n};\n\nconst DatabaseManagement: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [connections, setConnections] = useState<API.DatabaseConnection[]>([]);\n  const [selectedConnection, setSelectedConnection] = useState<API.DatabaseConnection | null>(null);\n  const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);\n  const [isEditModalVisible, setIsEditModalVisible] = useState(false);\n  const [isMaterializeModalVisible, setIsMaterializeModalVisible] = useState(false);\n  const [editingConnection, setEditingConnection] = useState<API.DatabaseConnection | null>(null);\n  const [connectionForm] = Form.useForm();\n  const [materializeForm] = Form.useForm();\n  const [syncRecords, setSyncRecords] = useState<SyncRecord[]>([]);\n  const [schemas, setSchemas] = useState<SchemaListItem[]>([]);\n  const [selectedSchemas, setSelectedSchemas] = useState<string[]>([]);\n  const [materializeLoading, setMaterializeLoading] = useState(false);\n  const [schemaTreeData, setSchemaTreeData] = useState<any[]>([]);\n  const [expandedKeys, setExpandedKeys] = useState<string[]>([]);\n  const [checkedKeys, setCheckedKeys] = useState<string[]>([]);\n  const [isAllSelected, setIsAllSelected] = useState(false);\n  const [isIndeterminate, setIsIndeterminate] = useState(false);\n  const [previewSchema, setPreviewSchema] = useState<SchemaListItem | null>(null);\n\n  // 数据库类型选项\n  const databaseTypes = [\n    { label: 'PostgreSQL', value: 'postgresql' },\n    { label: 'MySQL', value: 'mysql' },\n    { label: 'MongoDB', value: 'mongodb' },\n    { label: 'SQL Server', value: 'sqlserver' },\n    { label: 'Oracle', value: 'oracle' }\n  ];\n\n  // 处理数据库类型变化\n  const handleDatabaseTypeChange = (type: string) => {\n    // 根据数据库类型设置默认值\n    switch (type) {\n      case 'postgresql':\n        connectionForm.setFieldsValue({\n          port: 5432,\n          schema: 'public'\n        });\n        break;\n      case 'mysql':\n        connectionForm.setFieldsValue({\n          port: 3306,\n          schema: undefined\n        });\n        break;\n      case 'mongodb':\n        connectionForm.setFieldsValue({\n          port: 27017,\n          schema: undefined\n        });\n        break;\n      case 'sqlserver':\n        connectionForm.setFieldsValue({\n          port: 1433,\n          schema: undefined\n        });\n        break;\n      case 'oracle':\n        connectionForm.setFieldsValue({\n          port: 1521,\n          schema: undefined\n        });\n        break;\n    }\n  };\n\n  // 获取数据库连接列表\n  const fetchConnections = async () => {\n    setLoading(true);\n    try {\n      const response = await getDatabaseConnections({\n        page: 1,\n        limit: 100\n      });\n      if (response.success && response.data) {\n        setConnections(response.data.items || []);\n      }\n    } catch (error) {\n      message.error('获取数据库连接列表失败');\n    }\n    setLoading(false);\n  };\n\n  // 获取表结构列表\n  const fetchSchemas = async () => {\n    try {\n      const response = await getSchemas({});\n      // 过滤并转换数据以确保类型匹配\n      const validSchemas = (response || []).filter(schema => \n        schema.name && schema.code && schema.fields\n      ).map(schema => ({\n        id: schema.id,\n        name: schema.name!,\n        code: schema.code!,\n        description: schema.description,\n        isActive: true, // 默认值\n        version: 1, // 默认值\n        createdAt: schema.createdAt,\n        updatedAt: schema.updatedAt,\n        fields: schema.fields || []\n      }));\n      setSchemas(validSchemas);\n      \n      // 构建树形数据\n      const treeData = buildTree(validSchemas, schemaTreeConfig);\n      setSchemaTreeData(treeData);\n      \n      // 设置默认展开所有节点\n      const allKeys: string[] = [];\n      const collectKeys = (nodes: any[]) => {\n        nodes.forEach(node => {\n          allKeys.push(node.value);\n          if (node.children) {\n            collectKeys(node.children);\n          }\n        });\n      };\n      collectKeys(treeData);\n      setExpandedKeys(allKeys);\n    } catch (error) {\n      message.error('获取表结构列表失败');\n    }\n  };\n\n\n\n  // 测试连接\n  const handleTestConnection = async (connection: API.DatabaseConnection) => {\n    try {\n      const response = await postDatabaseConnectionsIdTest({ id: connection.id! });\n      if (response.success) {\n        message.success('连接测试成功');\n        // 添加同步记录\n        addSyncRecord({\n          id: crypto.randomUUID(),\n          connectionId: connection.id!,\n          connectionName: connection.name,\n          operation: 'test',\n          status: 'success',\n          message: '连接测试成功',\n          timestamp: new Date().toISOString()\n        });\n        fetchConnections(); // 刷新列表以更新状态\n      }\n    } catch (error: any) {\n      message.error(`连接测试失败: ${error.response?.data?.message || error.message}`);\n      // 添加失败的同步记录\n      addSyncRecord({\n        id: crypto.randomUUID(),\n        connectionId: connection.id!,\n        connectionName: connection.name,\n        operation: 'test',\n        status: 'failed',\n        message: error.response?.data?.message || error.message,\n        timestamp: new Date().toISOString()\n      });\n    }\n  };\n\n  // 添加同步记录\n  const addSyncRecord = (record: SyncRecord) => {\n    setSyncRecords(prev => [record, ...prev.slice(0, 99)]); // 保留最近100条记录\n  };\n\n  // 创建数据库连接\n  const handleCreateConnection = async (values: any) => {\n    try {\n      const response = await postDatabaseConnections(values);\n      if (response.success) {\n        message.success('创建成功');\n        \n        // 显示警告信息（如果有）\n        if (response.data && 'warnings' in response.data && Array.isArray((response.data as any).warnings) && (response.data as any).warnings.length > 0) {\n          (response.data as any).warnings.forEach((warning: string) => {\n            message.warning(warning);\n          });\n        }\n        \n        setIsCreateModalVisible(false);\n        connectionForm.resetFields();\n        fetchConnections();\n        // 添加同步记录\n        addSyncRecord({\n          id: crypto.randomUUID(),\n          connectionId: response.data?.id || '',\n          connectionName: values.name,\n          operation: 'create',\n          status: 'success',\n          message: '数据库连接创建成功',\n          timestamp: new Date().toISOString()\n        });\n      }\n    } catch (error: any) {\n      message.error(`创建失败: ${error.response?.data?.message || error.message}`);\n    }\n  };\n\n  // 更新数据库连接\n  const handleUpdateConnection = async (values: any) => {\n    if (!editingConnection?.id) {\n      message.error('编辑的连接信息不完整');\n      return;\n    }\n\n    // 如果密码为空，则不包含在更新数据中\n    const updateData = { ...values };\n    if (!updateData.password || updateData.password.trim() === '') {\n      delete updateData.password;\n    }\n\n    try {\n      const response = await putDatabaseConnectionsId(\n        { id: editingConnection.id },\n        updateData\n      );\n      \n      if (response.success) {\n        message.success('更新成功');\n        \n        // 显示警告信息（如果有）\n        if (response.data && 'warnings' in response.data && Array.isArray((response.data as any).warnings) && (response.data as any).warnings.length > 0) {\n          (response.data as any).warnings.forEach((warning: string) => {\n            message.warning(warning);\n          });\n        }\n        \n        setIsEditModalVisible(false);\n        connectionForm.resetFields();\n        setEditingConnection(null);\n        fetchConnections();\n        \n        // 如果当前选中的连接被编辑了，更新选中状态\n        if (selectedConnection?.id === editingConnection.id) {\n          setSelectedConnection(response.data || null);\n        }\n        \n        // 添加同步记录\n        addSyncRecord({\n          id: crypto.randomUUID(),\n          connectionId: editingConnection.id,\n          connectionName: values.name,\n          operation: 'update',\n          status: 'success',\n          message: '数据库连接更新成功',\n          timestamp: new Date().toISOString()\n        });\n      }\n    } catch (error: any) {\n      message.error(`更新失败: ${error.response?.data?.message || error.message}`);\n      \n      // 添加失败的同步记录\n      addSyncRecord({\n        id: crypto.randomUUID(),\n        connectionId: editingConnection.id,\n        connectionName: editingConnection.name,\n        operation: 'update',\n        status: 'failed',\n        message: error.response?.data?.message || error.message,\n        timestamp: new Date().toISOString()\n      });\n    }\n  };\n\n  // 删除数据库连接\n  const handleDeleteConnection = async (id: string) => {\n    try {\n      const connection = connections.find(c => c.id === id);\n      await deleteDatabaseConnectionsId({ id });\n      message.success('删除成功');\n      if (selectedConnection?.id === id) {\n        setSelectedConnection(null);\n      }\n      fetchConnections();\n      // 添加同步记录\n      if (connection) {\n        addSyncRecord({\n          id: crypto.randomUUID(),\n          connectionId: id,\n          connectionName: connection.name,\n          operation: 'delete',\n          status: 'success',\n          message: '数据库连接删除成功',\n          timestamp: new Date().toISOString()\n        });\n      }\n    } catch (error: any) {\n      message.error(`删除失败: ${error.response?.data?.message || error.message}`);\n    }\n  };\n\n  // 获取状态标签颜色\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'success';\n      case 'inactive': return 'default';\n      case 'testing': return 'processing';\n      case 'failed': return 'error';\n      default: return 'default';\n    }\n  };\n\n  // 获取状态文本\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'active': return '活跃';\n      case 'inactive': return '未激活';\n      case 'testing': return '测试中';\n      case 'failed': return '失败';\n      default: return '未知';\n    }\n  };\n\n  // 获取数据库类型标签颜色\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'postgresql': return 'blue';\n      case 'mysql': return 'orange';\n      case 'mongodb': return 'green';\n      case 'sqlserver': return 'purple';\n      case 'oracle': return 'red';\n      default: return 'default';\n    }\n  };\n\n  // 处理表同步\n  const handleMaterializeTables = async (values: any) => {\n    if (selectedSchemas.length === 0) {\n      message.warning('请选择要同步的表结构');\n      return;\n    }\n\n    setMaterializeLoading(true);\n    try {\n      const response = await postMaterializeTables({\n        connectionId: selectedConnection!.id!,\n        schemaCodes: selectedSchemas,\n        config: {\n          overwrite: values.overwrite,\n          includeIndexes: values.includeIndexes,\n          includeConstraints: values.includeConstraints,\n          targetSchema: values.targetSchema,\n          tablePrefix: values.tablePrefix\n        }\n      });\n\n      if (response.success) {\n        message.success('表同步成功');\n        \n        // 添加同步记录\n        const successCount = response.results?.filter(r => r.success).length || 0;\n        const failCount = response.results?.filter(r => !r.success).length || 0;\n        \n        // 构建详细的失败信息\n        const failedResults = response.results?.filter(r => !r.success) || [];\n        const failureDetails = failedResults.map(r => \n          `${r.schemaCode}: ${r.message || r.error || '未知错误'}`\n        ).join('\\n');\n        \n        addSyncRecord({\n          id: crypto.randomUUID(),\n          connectionId: selectedConnection!.id!,\n          connectionName: selectedConnection!.name,\n          operation: 'materialize',\n          status: failCount === 0 ? 'success' : 'failed',\n          message: `成功同步 ${successCount} 个表${failCount > 0 ? `，失败 ${failCount} 个表` : ''}`,\n          timestamp: new Date().toISOString(),\n          details: response.results,\n          failureDetails: failCount > 0 ? failureDetails : undefined\n        });\n\n        setIsMaterializeModalVisible(false);\n        materializeForm.resetFields();\n        setSelectedSchemas([]);\n      }\n    } catch (error: any) {\n      message.error(`表同步失败: ${error.response?.data?.message || error.message}`);\n      \n      // 添加失败的同步记录\n      addSyncRecord({\n        id: crypto.randomUUID(),\n        connectionId: selectedConnection!.id!,\n        connectionName: selectedConnection!.name,\n        operation: 'materialize',\n        status: 'failed',\n        message: error.response?.data?.message || error.message,\n        timestamp: new Date().toISOString()\n      });\n    }\n    setMaterializeLoading(false);\n  };\n\n  // 处理全选/取消全选\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      // 全选：获取所有叶子节点的key\n      const allLeafKeys: string[] = [];\n      const collectLeafKeys = (nodes: any[]) => {\n        nodes.forEach(node => {\n          if (node.children && node.children.length > 0) {\n            collectLeafKeys(node.children);\n          } else {\n            // 只有叶子节点才添加到选中列表\n            allLeafKeys.push(node.key || node.value);\n          }\n        });\n      };\n      collectLeafKeys(schemaTreeData);\n      setCheckedKeys(allLeafKeys);\n      \n      // 更新选中的表结构\n      const leafCodes: string[] = [];\n      const collectLeafCodes = (nodes: any[], checkedKeys: string[]) => {\n        nodes.forEach(node => {\n          const nodeKey = node.key || node.value;\n          if (checkedKeys.includes(nodeKey)) {\n            if (node.children && node.children.length > 0) {\n              collectLeafCodes(node.children, checkedKeys);\n            } else {\n              if (node.rawSchema) {\n                leafCodes.push(node.rawSchema.code);\n              }\n            }\n          }\n        });\n      };\n      collectLeafCodes(schemaTreeData, checkedKeys);\n      setSelectedSchemas(leafCodes);\n    } else {\n      // 取消全选\n      setCheckedKeys([]);\n      setSelectedSchemas([]);\n    }\n  };\n\n  // 检查是否全选\n  const checkSelectionStatus = () => {\n    const allLeafKeys: string[] = [];\n    const collectLeafKeys = (nodes: any[]) => {\n      nodes.forEach(node => {\n        if (node.children && node.children.length > 0) {\n          collectLeafKeys(node.children);\n        } else {\n          allLeafKeys.push(node.key || node.value);\n        }\n      });\n    };\n    collectLeafKeys(schemaTreeData);\n    \n    const selectedLeafKeys = checkedKeys.filter(key => \n      allLeafKeys.includes(key)\n    );\n    \n    setIsAllSelected(allLeafKeys.length > 0 && selectedLeafKeys.length === allLeafKeys.length);\n    setIsIndeterminate(selectedLeafKeys.length > 0 && selectedLeafKeys.length < allLeafKeys.length);\n  };\n\n  // 监听checkedKeys变化，更新全选状态\n  useEffect(() => {\n    checkSelectionStatus();\n  }, [checkedKeys, schemaTreeData]);\n\n\n\n  useEffect(() => {\n    fetchConnections();\n    fetchSchemas();\n  }, []);\n\n  // 渲染字段预览列表\n  const renderFieldPreview = () => {\n    if (!previewSchema) {\n      return (\n        <div style={{ textAlign: 'center', padding: '20px', color: '#999' }}>\n          请选择左侧的表结构查看字段详情\n        </div>\n      );\n    }\n\n    // 获取关系类型显示文本\n    const getRelationTypeText = (field: any) => {\n      const type = field.relationType || (field.relationConfig?.multiple ? 'oneToMany' : 'oneToOne');\n      switch (type) {\n        case 'oneToOne': return '1:1';\n        case 'oneToMany': return '1:n';\n        case 'manyToOne': return 'n:1';\n        case 'manyToMany': return 'm:n';\n        default: return '1:1';\n      }\n    };\n\n    // 获取目标数据表的描述信息\n    const getTargetSchemaDescription = (code: string | undefined) => {\n      if (!code) return '';\n      const schema = schemas.find(s => s.code === code);\n      return schema ? `${code}（${schema.name}）` : code;\n    };\n\n    // 获取枚举的描述信息\n    const getEnumDescription = (enumCode: string | undefined) => {\n      if (!enumCode) return enumCode || '';\n      return enumCode;\n    };\n\n    return (\n      <div style={{ padding: '6px 16px 16px 16px' }}>\n        <div style={{ marginBottom: '16px' }}>\n          <h4 style={{ margin: 0 }}>{previewSchema.name}\n          {previewSchema.description && (\n            <span style={{ color: '#666', fontSize: '12px', marginLeft: '14px' }}>\n              {previewSchema.description}\n            </span>\n          )}\n          </h4>\n        </div>\n        <List\n          dataSource={previewSchema.fields}\n          size=\"small\"\n          renderItem={(field: any, index: number) => (\n            <List.Item\n              key={field.id || index}\n              className=\"px-0\"\n            >\n              <List.Item.Meta\n                title={\n                  <Space>\n                    <span>{field.name}</span>\n                    {field.description && <span>({field.description})</span>}\n                    <Tag color=\"blue\">{field.type}</Tag>\n                    {/* 主键标识 - 暂时注释，等待前端更新 */}\n                    {/* {(field.type === 'uuid' || field.type === 'auto_increment') && field.isPrimaryKey && (\n                      <Tag color=\"red\">PK</Tag>\n                    )} */}\n                  </Space>\n                }\n                description={\n                  <div style={{ marginTop: '4px' }}>\n                    {/* 必填 */}\n                    {field.required && <Tag color=\"cyan\" bordered={false}>必填</Tag>}\n                    {/* 长度 */}\n                    {field.type === 'string' && field.length && (\n                      <Tag color=\"cyan\" bordered={false}>\n                        VARCHAR({field.length})\n                      </Tag>\n                    )}\n                    {/* 长文本 */}\n                    {field.type === 'text' && (\n                      <Tag color=\"cyan\" bordered={false}>\n                        TEXT\n                      </Tag>\n                    )}\n                    {/* 日期 */}\n                    {field.type === 'date' && field.dateType && (\n                      <Tag color=\"cyan\" bordered={false}>{field.dateType}</Tag>\n                    )}\n                    {/* 枚举 */}\n                    {field.type === 'enum' && field.enumConfig && (\n                      <>\n                        <Tag color=\"cyan\" bordered={false}>\n                          枚举: {getEnumDescription(field.enumConfig?.targetEnumCode)}\n                        </Tag>\n                        {field.enumConfig?.multiple && (\n                          <Tag color=\"purple\" bordered={false}>允许多选</Tag>\n                        )}\n                      </>\n                    )}\n                    {/* 关联 */}\n                    {field.type === 'relation' && field.relationConfig && (\n                      <>\n                        <Tag color=\"cyan\" bordered={false}>\n                          {getRelationTypeText(field)}\n                        </Tag>\n                        <Tag color=\"cyan\" bordered={false}>\n                          关联: {getTargetSchemaDescription(field.relationConfig?.targetSchemaCode)}\n                        </Tag>\n                      </>\n                    )}\n                    {/* 媒体 */}\n                    {field.type === 'media' && field.mediaConfig && (\n                      <Tag color=\"cyan\" bordered={false}>媒体类型: {field.mediaConfig?.mediaType}</Tag>\n                    )}\n                    {/* API */}\n                    {field.type === 'api' && field.apiConfig && (\n                      <Tag color=\"cyan\" bordered={false}>API: {field.apiConfig?.endpoint}</Tag>\n                    )}\n                    {/* 数字类型 */}\n                    {field.type === 'number' && (\n                      <Tag color=\"cyan\" bordered={false}>数字</Tag>\n                    )}\n                  </div>\n                }\n              />\n            </List.Item>\n          )}\n        />\n      </div>\n    );\n  };\n\n  const connectionColumns = [\n    {\n      title: '连接名称',\n      dataIndex: 'name',\n      key: 'name',\n      render: (text: string, record: API.DatabaseConnection) => (\n        <div>\n          <div style={{ fontWeight: 'bold' }}>{text}</div>\n          {record.description && (\n            <div style={{ color: '#666', fontSize: '12px' }}>{record.description}</div>\n          )}\n        </div>\n      ),\n    },\n    {\n      title: '数据库类型',\n      dataIndex: 'type',\n      key: 'type',\n      render: (type: string) => (\n        <Tag color={getTypeColor(type)}>{type.toUpperCase()}</Tag>\n      ),\n    },\n    {\n      title: '连接信息',\n      key: 'connection',\n      hidden: true,\n      render: (record: API.DatabaseConnection) => (\n        <div style={{ fontSize: '12px' }}>\n          <div>{record.host}:{record.port}</div>\n          <div>{record.database}</div>\n        </div>\n      ),\n    },\n    {\n      title: '状态',\n      dataIndex: 'status',\n      key: 'status',\n      render: (status: string, record: API.DatabaseConnection) => (\n        <Space>\n          <Badge \n            status={record.lastTestSuccess ? 'success' : 'error'} \n            text={getStatusText(status)}\n          />\n          {record.lastTestSuccess && <CheckCircleOutlined style={{ color: '#52c41a' }} />}\n          {!record.lastTestSuccess && record.lastTestAt && <CloseCircleOutlined style={{ color: '#ff4d4f' }} />}\n        </Space>\n      ),\n    },\n    {\n      title: '操作',\n      key: 'action',\n      width: 60,\n      fixed: 'right',\n      render: (record: API.DatabaseConnection) => (\n        <Button\n          type=\"link\"\n          size=\"small\"\n          icon={<EditOutlined />}\n          onClick={(e) => {\n            e.stopPropagation(); // 阻止行点击事件\n            setEditingConnection(record);\n            // 设置表单值，但不包含密码字段\n            const formData = { ...record } as any;\n            if ('password' in formData) {\n              delete formData.password; // 编辑时不显示原密码\n            }\n            connectionForm.setFieldsValue(formData);\n            setIsEditModalVisible(true);\n          }}\n        />\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"f-fullscreen\">\n      <Splitter style={{ height: \"calc(100vh - 57px)\" }}>\n        <Splitter.Panel defaultSize=\"50%\">\n          <div className=\"f-header\">\n            <label className=\"fw-bold\">数据库连接</label>\n            <Button\n              type=\"primary\"\n              icon={<PlusOutlined />}\n              onClick={() => {\n                connectionForm.resetFields();\n                setIsCreateModalVisible(true);\n              }}\n            >\n              新建数据库连接\n            </Button>\n          </div>\n          <div\n            className=\"pos-relative overflow-y\"\n            style={{ height: \"calc(100% - 50px)\" }}\n          >\n            <div className=\"pb-4\">\n              <Table\n                columns={connectionColumns as any}\n                dataSource={connections}\n                rowKey=\"id\"\n                loading={loading}\n                pagination={false}\n                size=\"small\"\n                onRow={(record) => ({\n                  onClick: () => setSelectedConnection(record),\n                  className: selectedConnection?.id === record.id ? \"ant-table-row-selected\" : \"\",\n                  style: { cursor: \"pointer\" },\n                })}\n              />\n            </div>\n          </div>\n        </Splitter.Panel>\n        <Splitter.Panel>\n          <div\n            className=\"pos-relative overflow-y\"\n            style={{ height: \"calc(100% - 50px)\" }}\n          >\n            <div className=\"pb-4\">\n              {selectedConnection ? (\n                <Tabs\n                  defaultActiveKey=\"connection\"\n                  centered\n                  style={{ height: '100%' }}\n                  items={[\n                    {\n                      key: 'connection',\n                      label: '连接信息',\n                      children: (\n                        <div style={{ padding: '16px' }}>\n                          <Space style={{ marginBottom: 16 }}>\n                            <Button\n                              type=\"primary\"\n                              size=\"small\"\n                              icon={<SyncOutlined />}\n                              onClick={() => handleTestConnection(selectedConnection)}\n                              loading={selectedConnection.status === 'testing'}\n                            >\n                              测试连接\n                            </Button>\n                            <Popconfirm\n                              title=\"删除数据库连接\"\n                              description={`确定要删除 \"${selectedConnection.name}\" 吗？此操作不可恢复。`}\n                              onConfirm={() => handleDeleteConnection(selectedConnection.id!)}\n                              okText=\"确定\"\n                              cancelText=\"取消\"\n                            >\n                              <Button\n                                type=\"primary\"\n                                danger\n                                size=\"small\"\n                                icon={<DeleteOutlined />}\n                              >\n                                删除连接\n                              </Button>\n                            </Popconfirm>\n                          </Space>\n                          <Card title=\"连接详情\">\n                            <Descriptions column={1} size=\"small\">\n                              <Descriptions.Item label=\"连接名称\">{selectedConnection.name}</Descriptions.Item>\n                              <Descriptions.Item label=\"数据库类型\">\n                                <Tag color={getTypeColor(selectedConnection.type)}>\n                                  {selectedConnection.type.toUpperCase()}\n                                </Tag>\n                              </Descriptions.Item>\n                              <Descriptions.Item label=\"主机地址\">{selectedConnection.host}:{selectedConnection.port}</Descriptions.Item>\n                              <Descriptions.Item label=\"数据库名\">{selectedConnection.database}</Descriptions.Item>\n                              <Descriptions.Item label=\"用户名\">{selectedConnection.username}</Descriptions.Item>\n                              <Descriptions.Item label=\"状态\">\n                                <Badge \n                                  status={selectedConnection.lastTestSuccess ? 'success' : 'error'} \n                                  text={getStatusText(selectedConnection.status || 'inactive')}\n                                />\n                              </Descriptions.Item>\n                              {selectedConnection.lastTestAt && (\n                                <Descriptions.Item label=\"最后测试时间\">\n                                  {new Date(selectedConnection.lastTestAt).toLocaleString()}\n                                </Descriptions.Item>\n                              )}\n                            </Descriptions>\n                          </Card>\n                        </div>\n                      ),\n                    },\n                    {\n                      key: 'sync',\n                      label: '同步',\n                      children: (\n                        <div style={{ padding: '16px' }}>\n                          {!selectedConnection.lastTestSuccess ? (\n                            <div style={{ textAlign: 'center', padding: '40px', color: '#999' }}>\n                              <SyncOutlined style={{ fontSize: '48px', marginBottom: '16px' }} />\n                              <div>请先完成测试连接</div>\n                            </div>\n                          ) : (\n                            <>\n                              <Space style={{ marginBottom: 16 }}>\n                                <Button\n                                  type=\"primary\"\n                                  size=\"small\"\n                                  icon={<CloudServerOutlined />}\n                                  onClick={() => {\n                                    setIsMaterializeModalVisible(true);\n                                    materializeForm.resetFields();\n                                    setSelectedSchemas([]);\n                                    setCheckedKeys([]);\n                                    setIsAllSelected(false);\n                                    setIsIndeterminate(false);\n                                    setPreviewSchema(null);\n                                  }}\n                                >\n                                  同步\n                                </Button>\n                              </Space>\n                              <Card title=\"同步记录\">\n                                <Timeline>\n                                  {syncRecords\n                                    .filter(record => record.connectionId === selectedConnection.id)\n                                    .map(record => (\n                                      <Timeline.Item\n                                        key={record.id}\n                                        color={record.status === 'success' ? 'green' : record.status === 'failed' ? 'red' : 'blue'}\n                                        dot={record.operation === 'test' ? <SyncOutlined /> : <DatabaseOutlined />}\n                                      >\n                                        <div>\n                                          <div style={{ fontWeight: 'bold' }}>\n                                            {record.operation === 'create' && '创建连接'}\n                                            {record.operation === 'update' && '更新连接'}\n                                            {record.operation === 'delete' && '删除连接'}\n                                            {record.operation === 'test' && '测试连接'}\n                                            {record.operation === 'materialize' && '表同步'}\n                                          </div>\n                                          <div style={{ color: '#666', fontSize: '12px' }}>\n                                            {record.message}\n                                          </div>\n                                          {record.failureDetails && (\n                                            <div style={{ \n                                              color: '#ff4d4f', \n                                              fontSize: '11px', \n                                              marginTop: '4px',\n                                              backgroundColor: '#fff2f0',\n                                              padding: '4px 8px',\n                                              borderRadius: '4px',\n                                              border: '1px solid #ffccc7',\n                                              whiteSpace: 'pre-line'\n                                            }}>\n                                              <div style={{ fontWeight: 'bold', marginBottom: '2px' }}>失败详情：</div>\n                                              {record.failureDetails}\n                                            </div>\n                                          )}\n                                          <div style={{ color: '#999', fontSize: '12px', marginTop: '4px' }}>\n                                            {new Date(record.timestamp).toLocaleString()}\n                                          </div>\n                                        </div>\n                                      </Timeline.Item>\n                                    ))}\n                                  {syncRecords.filter(record => record.connectionId === selectedConnection.id).length === 0 && (\n                                    <div style={{ textAlign: 'center', color: '#999', padding: '20px' }}>\n                                      暂无同步记录\n                                    </div>\n                                  )}\n                                </Timeline>\n                              </Card>\n                            </>\n                          )}\n                        </div>\n                      ),\n                    },\n                    {\n                      key: 'tables',\n                      label: '库表结构',\n                      children: (\n                        <div style={{ padding: '16px' }}>\n                          <DatabaseTables \n                            connectionId={selectedConnection?.id}\n                            lastTestSuccess={selectedConnection?.lastTestSuccess}\n                          />\n                        </div>\n                      ),\n                    },\n                  ]}\n                />\n              ) : (\n                <div style={{ textAlign: 'center', padding: '20px' }}>\n                  请选择左侧的数据库连接查看详细信息\n                </div>\n              )}\n            </div>\n          </div>\n        </Splitter.Panel>\n      </Splitter>\n\n      {/* 创建数据库连接模态框 */}\n      <Modal\n        title=\"新建数据库连接\"\n        open={isCreateModalVisible}\n        onOk={() => connectionForm.submit()}\n        onCancel={() => setIsCreateModalVisible(false)}\n        width={600}\n        maskClosable={false}\n      >\n        <Form\n          form={connectionForm}\n          layout=\"vertical\"\n          onFinish={handleCreateConnection}\n        >\n          <Form.Item\n            name=\"name\"\n            label=\"连接名称\"\n            rules={[{ required: true, message: '请输入连接名称' }]}\n          >\n            <Input placeholder=\"请输入连接名称\" />\n          </Form.Item>\n          \n          <Form.Item\n            name=\"description\"\n            label=\"连接描述\"\n          >\n            <Input.TextArea placeholder=\"请输入连接描述\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"type\"\n            label=\"数据库类型\"\n            rules={[{ required: true, message: '请选择数据库类型' }]}\n          >\n            <Select \n              placeholder=\"请选择数据库类型\"\n              onChange={handleDatabaseTypeChange}\n            >\n              {databaseTypes.map(type => (\n                <Option key={type.value} value={type.value}>{type.label}</Option>\n              ))}\n            </Select>\n          </Form.Item>\n\n          <Form.Item\n            name=\"host\"\n            label=\"主机地址\"\n            rules={[{ required: true, message: '请输入主机地址' }]}\n          >\n            <Input placeholder=\"localhost\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"port\"\n            label=\"端口号\"\n            rules={[{ required: true, message: '请输入端口号' }]}\n          >\n            <InputNumber \n              placeholder=\"5432\" \n              style={{ width: '100%' }}\n              min={1}\n              max={65535}\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"database\"\n            label=\"数据库名称\"\n            rules={[{ required: true, message: '请输入数据库名称' }]}\n          >\n            <Input placeholder=\"请输入数据库名称\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"username\"\n            label=\"用户名\"\n            rules={[{ required: true, message: '请输入用户名' }]}\n          >\n            <Input placeholder=\"请输入用户名\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            label=\"密码\"\n            rules={[{ required: false, message: '请输入密码' }]}\n          >\n            <Input.Password placeholder=\"请输入密码（可选）\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"schema\"\n            label=\"Schema名称\"\n          >\n            <Input placeholder=\"public\" />\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* 编辑数据库连接模态框 */}\n      <Modal\n        title=\"编辑数据库连接\"\n        open={isEditModalVisible}\n        onOk={() => connectionForm.submit()}\n        onCancel={() => {\n          setIsEditModalVisible(false);\n          setEditingConnection(null);\n          connectionForm.resetFields();\n        }}\n        width={600}\n        maskClosable={false}\n      >\n        <Form\n          form={connectionForm}\n          layout=\"vertical\"\n          onFinish={handleUpdateConnection}\n        >\n          <Form.Item\n            name=\"name\"\n            label=\"连接名称\"\n            rules={[{ required: true, message: '请输入连接名称' }]}\n          >\n            <Input placeholder=\"请输入连接名称\" />\n          </Form.Item>\n          \n          <Form.Item\n            name=\"description\"\n            label=\"连接描述\"\n          >\n            <Input.TextArea placeholder=\"请输入连接描述\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"type\"\n            label=\"数据库类型\"\n            rules={[{ required: true, message: '请选择数据库类型' }]}\n          >\n            <Select \n              placeholder=\"请选择数据库类型\"\n              onChange={handleDatabaseTypeChange}\n              disabled={true} // 编辑时不允许修改数据库类型\n            >\n              {databaseTypes.map(type => (\n                <Option key={type.value} value={type.value}>{type.label}</Option>\n              ))}\n            </Select>\n          </Form.Item>\n\n          <Form.Item\n            name=\"host\"\n            label=\"主机地址\"\n            rules={[{ required: true, message: '请输入主机地址' }]}\n          >\n            <Input placeholder=\"localhost\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"port\"\n            label=\"端口号\"\n            rules={[{ required: true, message: '请输入端口号' }]}\n          >\n            <InputNumber \n              placeholder=\"5432\" \n              style={{ width: '100%' }}\n              min={1}\n              max={65535}\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"database\"\n            label=\"数据库名称\"\n            rules={[{ required: true, message: '请输入数据库名称' }]}\n          >\n            <Input placeholder=\"请输入数据库名称\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"username\"\n            label=\"用户名\"\n            rules={[{ required: true, message: '请输入用户名' }]}\n          >\n            <Input placeholder=\"请输入用户名\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            label=\"密码\"\n            rules={[{ required: false, message: '请输入密码' }]}\n          >\n            <Input.Password placeholder=\"请输入新密码（留空则不修改）\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"schema\"\n            label=\"Schema名称\"\n          >\n            <Input placeholder=\"public\" />\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* 表同步模态框 */}\n      <Modal\n        title=\"将模型同步到数据库\"\n        open={isMaterializeModalVisible}\n        onOk={() => materializeForm.submit()}\n        onCancel={() => {\n          setIsMaterializeModalVisible(false);\n          setPreviewSchema(null);\n        }}\n        width={1000}\n        maskClosable={false}\n        confirmLoading={materializeLoading}\n        style={{ top: 20 }}\n      >\n        <Form\n          form={materializeForm}\n          layout=\"vertical\"\n          onFinish={handleMaterializeTables}\n          initialValues={{\n            overwrite: false,\n            includeIndexes: true,\n            includeConstraints: true,\n            targetSchema: selectedConnection?.schema || 'public',\n            tablePrefix: ''\n          }}\n        >\n          <div style={{ \n                height: '300px',\n                borderWidth: 1,\n                borderStyle: 'solid',\n                borderColor: '#424242',\n                borderRadius: 6,\n                background: '#141414',\n                marginBottom: '16px'\n            }}>\n            <Splitter style={{ height: '100%' }}>\n              <Splitter.Panel defaultSize=\"40%\">\n                <div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n                  <div style={{ display: 'flex', alignItems: 'center' }}>\n                    <div style={{ display: 'flex', alignItems: 'center', margin: '4px 8px 12px 8px' }}>\n                      <h4 style={{ margin: 0, marginRight: '8px' }}>选择要同步的表</h4>\n                      <Checkbox\n                        checked={isAllSelected}\n                        indeterminate={isIndeterminate}\n                        onChange={(e) => handleSelectAll(e.target.checked)}\n                      >\n                        全选\n                      </Checkbox>\n                    </div>\n                  </div>\n                  <div style={{ \n                    flex: 1,\n                    overflowY: 'auto', \n                    borderRadius: '6px'\n                  }}>\n                    <Tree\n                      checkable\n                      showIcon\n                      treeData={schemaTreeData}\n                      expandedKeys={expandedKeys}\n                      checkedKeys={checkedKeys}\n                      // height={300}\n                      onExpand={(expandedKeysValue) => {\n                        setExpandedKeys(expandedKeysValue as string[]);\n                      }}\n                      onCheck={(checkedKeysValue) => {\n                        const keys = Array.isArray(checkedKeysValue) ? checkedKeysValue : checkedKeysValue.checked;\n                        setCheckedKeys(keys as string[]);\n                        // 只收集叶子节点的code\n                        const leafCodes: string[] = [];\n                        const collectLeafCodes = (nodes: any[], checkedKeys: string[]) => {\n                          nodes.forEach(node => {\n                            const nodeKey = node.key || node.value;\n                            if (checkedKeys.includes(nodeKey)) {\n                              if (node.children && node.children.length > 0) {\n                                collectLeafCodes(node.children, checkedKeys);\n                              } else {\n                                // 只有叶子节点才添加到选中列表\n                                if (node.rawSchema) {\n                                  leafCodes.push(node.rawSchema.code);\n                                }\n                              }\n                            }\n                          });\n                        };\n                        collectLeafCodes(schemaTreeData, keys as string[]);\n                        setSelectedSchemas(leafCodes);\n                      }}\n                      onSelect={(selectedKeys, info) => {\n                        // 当点击树节点时，预览对应的表结构\n                        if (info.node.rawSchema) {\n                          setPreviewSchema(info.node.rawSchema);\n                        } else {\n                          setPreviewSchema(null);\n                        }\n                      }}\n                      titleRender={(node) => (\n                        <div>\n                          <div style={{ fontWeight: 'bold' }}>{node.label}\n                          {node.rawSchema && (\n                            <span style={{ color: '#666', fontSize: '12px' }}>\n                              字段数: {node.rawSchema.fields?.length || 0}\n                            </span>\n                          )}\n                          </div>\n                        </div>\n                      )}\n                    />\n                    {schemaTreeData.length === 0 && (\n                      <div style={{ textAlign: 'center', color: '#999', padding: '20px' }}>\n                        暂无表结构定义\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </Splitter.Panel>\n              <Splitter.Panel>\n                <div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n                  {/* <div style={{ height: '32px', display: 'flex', alignItems: 'center' }}>\n                    <h4 style={{ margin: 0 }}>字段预览</h4>\n                  </div> */}\n                  <div style={{ \n                    flex: 1,\n                    overflowY: 'auto',\n                    borderRadius: '6px',\n                  }}>\n                    {renderFieldPreview()}\n                  </div>\n                </div>\n              </Splitter.Panel>\n            </Splitter>\n          </div>\n\n          <Form.Item\n            name=\"targetSchema\"\n            label=\"目标Schema\"\n            rules={[{ required: true, message: '请输入目标Schema名称' }]}\n          >\n            <Input placeholder=\"public\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"tablePrefix\"\n            label=\"表名前缀\"\n          >\n            <Input placeholder=\"可选，为空则使用原表名\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"overwrite\"\n            valuePropName=\"checked\"\n          >\n            <Checkbox>覆盖已存在的表</Checkbox>\n          </Form.Item>\n\n          <Form.Item\n            name=\"includeIndexes\"\n            valuePropName=\"checked\"\n          >\n            <Checkbox>包含索引</Checkbox>\n          </Form.Item>\n\n          <Form.Item\n            name=\"includeConstraints\"\n            valuePropName=\"checked\"\n          >\n            <Checkbox>包含约束</Checkbox>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default DatabaseManagement; ",
      "__isJSFile": true,
      "__absFile": "/Users/yanfang/MOM/BDC/frontend/src/pages/DatabaseManagement/index.tsx"
    },
    "6": {
      "path": "/schema-graph",
      "name": "数据表图谱",
      "hideInMenu": true,
      "file": "@/pages/SchemaGraph/index.tsx",
      "parentId": "ant-design-pro-layout",
      "id": "6",
      "absPath": "/schema-graph",
      "__content": "import React, { useEffect, useState, useRef } from \"react\";\nimport cytoscape from \"cytoscape\";\n\n// https://github.com/shichuanpo/cytoscape.js-d3-force\nimport d3Force from \"cytoscape-d3-force\";\n// https://github.com/cytoscape/cytoscape.js-cola\nconst cola = require(\"cytoscape-cola\");\nimport { Button, Drawer, Descriptions, Tag, Space, Typography, Checkbox, Card, Select } from \"antd\";\nimport { RollbackOutlined, OneToOneOutlined, DownloadOutlined, GatewayOutlined } from \"@ant-design/icons\";\nimport { getSchemas } from \"@/services/BDC/api/schemaManagement\";\nimport { getEnums } from \"@/services/BDC/api/enumManagement\";\n\n// 注册插件\ncytoscape.use(d3Force);\ncytoscape.use(cola);\n\n// 添加 JSX 类型声明\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      [elemName: string]: any;\n    }\n  }\n}\n\nconst { Title, Text } = Typography;\n\nconst SchemaGraphNew2: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string>('');\n  const [drawerVisible, setDrawerVisible] = useState(false);\n  const [drawerTitle, setDrawerTitle] = useState('');\n  const [drawerContent, setDrawerContent] = useState<any>(null);\n  const [schemas, setSchemas] = useState<any[]>([]);\n  const [enums, setEnums] = useState<any[]>([]);\n  const [hideEnums, setHideEnums] = useState(false);\n  const [currentLayout, setCurrentLayout] = useState<string>('cola');\n  const cyRef = useRef<any>(null);\n\n  // 布局选项\n  const layoutOptions = [\n    // { value: 'd3-force', label: 'D3 Force' },\n    { value: 'cola', label: 'Cola' },\n    // { value: 'cose', label: 'Cose' },\n    // { value: 'concentric', label: 'Concentric' },\n    // { value: 'grid', label: 'Grid' }\n  ];\n\n  // 获取布局配置\n  const getLayoutConfig = (layoutName: string) => {\n    switch (layoutName) {\n      // case 'd3-force':\n      //   return {\n      //     name: 'd3-force',\n      //     animate: true,\n      //     maxIterations: 1000,\n      //     maxSimulationTime: 100,\n      //     ungrabifyWhileSimulating: false,\n      //     fixedAfterDragging: false,\n      //     fit: true,\n      //     padding: 50,\n      //     alpha: 1,\n      //     alphaMin: 0.001,\n      //     alphaDecay: 0.02,\n      //     alphaTarget: 0,\n      //     velocityDecay: 0.4,\n      //     collideRadius: (nodeData: any) => nodeData?.radius || 60,\n      //     collideStrength: 0.8,\n      //     collideIterations: 1,\n      //     linkId: (edgeData: any) => edgeData?.id,\n      //     linkDistance: 200,\n      //     linkStrength: 0.5,\n      //     linkIterations: 1,\n      //     manyBodyStrength: -500,\n      //     manyBodyTheta: 0.9,\n      //     manyBodyDistanceMin: 1,\n      //     manyBodyDistanceMax: undefined,\n      //     xStrength: 0.1,\n      //     xX: (el: any) => 0,\n      //     yStrength: 0.1,\n      //     yY: (el: any) => 0,\n      //     radialStrength: undefined,\n      //     radialRadius: undefined,\n      //     radialX: undefined,\n      //     radialY: undefined,\n      //     ready: function() {\n      //       console.log('D3 Force 布局完成');\n      //     },\n      //     stop: function() {\n      //       console.log('D3 Force 布局停止');\n      //     },\n      //     tick: function() {},\n      //     randomize: true,\n      //     infinite: false\n      //   };\n      case 'cola':\n        return {\n          name: 'cola',\n          animate: true,\n          refresh: 1,\n          maxSimulationTime: 4000,\n          ungrabifyWhileSimulating: false,\n          fit: true,\n          padding: 30,\n          nodeDimensionsIncludeLabels: false,\n          ready: function() {\n            console.log('Cola 布局完成');\n          },\n          stop: function() {\n            console.log('Cola 布局停止');\n          },\n          randomize: false,\n          avoidOverlap: true,\n          handleDisconnected: true,\n          convergenceThreshold: 0.01,\n          nodeSpacing: function(node: any) { return 10; },\n          flow: undefined,\n          alignment: undefined,\n          gapInequalities: undefined,\n          centerGraph: true,\n          edgeLength: 200,\n          edgeSymDiffLength: undefined,\n          edgeJaccardLength: undefined,\n          unconstrIter: undefined,\n          userConstIter: undefined,\n          allConstIter: undefined\n        };\n      // case 'cose':\n      //   return {\n      //     name: 'cose',\n      //     animate: true,\n      //     animationDuration: 1000,\n      //     nodeDimensionsIncludeLabels: true,\n      //     fit: true,\n      //     padding: 50,\n      //     randomize: true,\n      //     componentSpacing: 100,\n      //     nodeRepulsion: (node: any) => 4000,\n      //     nodeOverlap: 20,\n      //     gravity: 80,\n      //     numIter: 1000,\n      //     initialTemp: 200,\n      //     coolingFactor: 0.95,\n      //     minTemp: 1.0,\n      //     ready: function() {\n      //       console.log('Cose 布局完成');\n      //     },\n      //     stop: function() {\n      //       console.log('Cose 布局停止');\n      //     }\n      //   };\n      // case 'concentric':\n      //   return {\n      //     name: 'concentric',\n      //     animate: true,\n      //     animationDuration: 1000,\n      //     nodeDimensionsIncludeLabels: true,\n      //     fit: true,\n      //     padding: 50,\n      //     startAngle: 3 / 2 * Math.PI,\n      //     sweep: undefined,\n      //     clockwise: false,\n      //     equidistant: false,\n      //     minNodeSpacing: 10,\n      //     boundingBox: undefined,\n      //     avoidOverlap: true,\n      //     height: undefined,\n      //     width: undefined,\n      //     concentric: function(node: any) {\n      //       return node.degree();\n      //     },\n      //     levelWidth: function(nodes: any) {\n      //       return 2;\n      //     },\n      //     ready: function() {\n      //       console.log('Concentric 布局完成');\n      //     },\n      //     stop: function() {\n      //       console.log('Concentric 布局停止');\n      //     }\n      //   };\n      // case 'grid':\n      //   return {\n      //     name: 'grid',\n      //     animate: true,\n      //     animationDuration: 1000,\n      //     fit: true,\n      //     padding: 50,\n      //     boundingBox: undefined,\n      //     avoidOverlap: true,\n      //     avoidOverlapPadding: 10,\n      //     nodeDimensionsIncludeLabels: false,\n      //     spacingFactor: undefined,\n      //     condense: false,\n      //     rows: undefined,\n      //     cols: undefined,\n      //     position: function(node: any) {},\n      //     sort: undefined,\n      //     ready: function() {\n      //       console.log('Grid 布局完成');\n      //     },\n      //     stop: function() {\n      //       console.log('Grid 布局停止');\n      //     }\n      //   };\n      default:\n        return getLayoutConfig('cola');\n    }\n  };\n\n  // 切换布局\n  const handleLayoutChange = (layoutName: string) => {\n    console.log('切换布局到:', layoutName);\n    setCurrentLayout(layoutName);\n    \n    if (cyRef.current) {\n      const cy = cyRef.current;\n      const layoutConfig = getLayoutConfig(layoutName);\n      \n      cy.layout(layoutConfig).run();\n    }\n  };\n\n  useEffect(() => {\n    console.log('SchemaGraphNew2 组件挂载');\n    console.log('cytoscape 模块:', cytoscape);\n    \n    // 延迟设置 loading 为 false，确保容器渲染完成\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 100);\n    \n    return () => clearTimeout(timer);\n  }, []);\n\n  // 当 loading 变为 false 时初始化 cytoscape\n  useEffect(() => {\n    if (!loading) {\n      console.log('loading 变为 false，开始初始化 cytoscape');\n      setTimeout(() => {\n        initCytoscape();\n      }, 100);\n    }\n  }, [loading]);\n\n  // 监听 drawerVisible 状态变化\n  useEffect(() => {\n    console.log('drawerVisible 状态变化:', drawerVisible);\n    console.log('drawerTitle:', drawerTitle);\n    console.log('drawerContent:', drawerContent);\n  }, [drawerVisible, drawerTitle, drawerContent]);\n\n  const showNodeDetails = (nodeData: any) => {\n    console.log('showNodeDetails 被调用，nodeData:', nodeData);\n    console.log('当前 schemas:', schemas);\n    console.log('当前 enums:', enums);\n    \n    if (nodeData.type === 'schema') {\n      const schema = schemas.find((s: any) => s.code === nodeData.id);\n      console.log('找到的 schema:', schema);\n      if (schema) {\n        setDrawerTitle(`数据表: ${schema.name}`);\n        setDrawerContent({\n          type: 'schema',\n          data: schema\n        });\n        setDrawerVisible(true);\n        console.log('设置 Drawer 为可见');\n      } else {\n        console.error('未找到对应的 schema，nodeData.id:', nodeData.id);\n        console.error('可用的 schemas:', schemas.map((s: any) => s.code));\n      }\n    } else if (nodeData.type === 'enum') {\n      const enumItem = enums.find((e: any) => e.code === nodeData.id);\n      console.log('找到的 enumItem:', enumItem);\n      if (enumItem) {\n        setDrawerTitle(`枚举: ${enumItem.name}`);\n        setDrawerContent({\n          type: 'enum',\n          data: enumItem\n        });\n        setDrawerVisible(true);\n        console.log('设置 Drawer 为可见');\n      } else {\n        console.error('未找到对应的 enumItem，nodeData.id:', nodeData.id);\n        console.error('可用的 enums:', enums.map((e: any) => e.code));\n      }\n    }\n  };\n\n  const showNodeDetailsWithData = (nodeData: any, schemasData: any[], enumsData: any[]) => {\n    console.log('showNodeDetailsWithData 被调用，nodeData:', nodeData);\n    console.log('传入的 schemasData:', schemasData);\n    console.log('传入的 enumsData:', enumsData);\n    \n    if (nodeData.type === 'schema') {\n      const schema = schemasData.find((s: any) => s.code === nodeData.id);\n      console.log('找到的 schema:', schema);\n      if (schema) {\n        setDrawerTitle(`数据表: ${schema.name}`);\n        setDrawerContent({\n          type: 'schema',\n          data: schema\n        });\n        setDrawerVisible(true);\n        console.log('设置 Drawer 为可见');\n      } else {\n        console.error('未找到对应的 schema，nodeData.id:', nodeData.id);\n        console.error('可用的 schemas:', schemasData.map((s: any) => s.code));\n      }\n    } else if (nodeData.type === 'enum') {\n      const enumItem = enumsData.find((e: any) => e.code === nodeData.id);\n      console.log('找到的 enumItem:', enumItem);\n      if (enumItem) {\n        setDrawerTitle(`枚举: ${enumItem.name}`);\n        setDrawerContent({\n          type: 'enum',\n          data: enumItem\n        });\n        setDrawerVisible(true);\n        console.log('设置 Drawer 为可见');\n      } else {\n        console.error('未找到对应的 enumItem，nodeData.id:', nodeData.id);\n        console.error('可用的 enums:', enumsData.map((e: any) => e.code));\n      }\n    }\n  };\n\n  const showEdgeDetails = (edgeData: any) => {\n    console.log('showEdgeDetails 被调用，edgeData:', edgeData);\n    setDrawerTitle(`关系: ${edgeData.label}`);\n    setDrawerContent({\n      type: 'edge',\n      data: edgeData\n    });\n    setDrawerVisible(true);\n    console.log('设置 Drawer 为可见');\n  };\n\n  const renderSchemaDetails = (schema: any) => {\n    return (\n      <div>\n        <Descriptions column={1} bordered>\n          <Descriptions.Item label=\"编码\">{schema.code}</Descriptions.Item>\n          <Descriptions.Item label=\"名称\">{schema.name}</Descriptions.Item>\n          <Descriptions.Item label=\"描述\">{schema.description || '无'}</Descriptions.Item>\n        </Descriptions>\n        \n        <Title level={4} style={{ marginTop: 24, marginBottom: 16 }}>字段列表</Title>\n        {schema.fields && schema.fields.length > 0 ? (\n          <div>\n            {schema.fields.map((field: any, index: number) => (\n              <div key={index} style={{ \n                borderRadius: 6, \n                padding: 12, \n                marginBottom: 8,\n                background: '#fafafa0a'\n              }}>\n                <Space direction=\"vertical\" style={{ width: '100%' }}>\n                  <Space>\n                    <Text strong>{field.name}</Text>\n                    <Tag color=\"blue\">{field.type}</Tag>\n                    {field.required && <Tag color=\"red\">必填</Tag>}\n                  </Space>\n                  \n                  {field.description && (\n                    <div style={{ fontSize: '13.5px', lineHeight: '1.4', color: '#666', whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>\n                      {field.description}\n                    </div>\n                  )}\n                  \n                  {field.type === 'relation' && field.relationConfig && (\n                    <div>\n                      <Text type=\"secondary\">关联到: {field.relationConfig.targetSchemaCode}</Text>\n                      <br />\n                      <Text type=\"secondary\">多对多: {field.relationConfig.multiple ? '是' : '否'}</Text>\n                    </div>\n                  )}\n                  \n                  {field.type === 'enum' && field.enumConfig && (\n                    <div>\n                      <Text type=\"secondary\">枚举: {field.enumConfig.targetEnumCode}</Text>\n                      <br />\n                      <Text type=\"secondary\">多选: {field.enumConfig.multiple ? '是' : '否'}</Text>\n                    </div>\n                  )}\n                </Space>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <Text type=\"secondary\">暂无字段</Text>\n        )}\n      </div>\n    );\n  };\n\n  const renderEnumDetails = (enumItem: any) => {\n    return (\n      <div>\n        <Descriptions column={1} bordered>\n          <Descriptions.Item label=\"编码\">{enumItem.code}</Descriptions.Item>\n          <Descriptions.Item label=\"名称\">{enumItem.name}</Descriptions.Item>\n          <Descriptions.Item label=\"描述\">{enumItem.description || '无'}</Descriptions.Item>\n        </Descriptions>\n        \n        <Title level={4} style={{ marginTop: 24, marginBottom: 16 }}>选项列表</Title>\n        {enumItem.options && enumItem.options.length > 0 ? (\n          <div>\n            {enumItem.options.map((option: any, index: number) => (\n              <div key={index} style={{ \n                borderRadius: 6, \n                padding: 12, \n                marginBottom: 8,\n                background: '#fafafa0a'\n              }}>\n                <Space direction=\"vertical\" style={{ width: '100%' }}>\n                  <Space>\n                    <Text strong>{option.label}</Text>\n                    <Tag color=\"green\">{option.value}</Tag>\n                  </Space>\n                  \n                  {option.description && (\n                    <div style={{ fontSize: '13.5px', lineHeight: '1.4', color: '#666', whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>\n                      {option.description}\n                    </div>\n                  )}\n                </Space>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <Text type=\"secondary\">暂无选项</Text>\n        )}\n      </div>\n    );\n  };\n\n  const renderEdgeDetails = (edgeData: any) => {\n    return (\n      <div>\n        <Descriptions column={1} bordered>\n          <Descriptions.Item label=\"关系类型\">\n            <Tag color={edgeData.type === 'relation' ? 'blue' : 'green'}>\n              {edgeData.type === 'relation' ? '关联关系' : '枚举关系'}\n            </Tag>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"字段名称\">{edgeData.label.split(' (')[0]}</Descriptions.Item>\n          <Descriptions.Item label=\"源节点\">{edgeData.source}</Descriptions.Item>\n          <Descriptions.Item label=\"目标节点\">{edgeData.target}</Descriptions.Item>\n        </Descriptions>\n        \n        {edgeData.type === 'relation' && (\n          <div style={{ marginTop: 16 }}>\n            <Text strong>关系详情:</Text>\n            <br />\n            <Text type=\"secondary\">关系类型: {edgeData.relationType}</Text>\n          </div>\n        )}\n        \n        {edgeData.type === 'enum' && (\n          <div style={{ marginTop: 16 }}>\n            <Text strong>枚举详情:</Text>\n            <br />\n            <Text type=\"secondary\">选择方式: {edgeData.multiple ? '多选' : '单选'}</Text>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const handleHideEnumsChange = (checked: boolean) => {\n    console.log('隐藏枚举状态变化:', checked);\n    setHideEnums(checked);\n    \n    if (cyRef.current) {\n      const cy = cyRef.current;\n      \n      if (checked) {\n        // 隐藏枚举节点\n        cy.$('node[type = \"enum\"]').hide();\n        // 隐藏连接到枚举的边\n        cy.$('edge[type = \"enum\"]').hide();\n      } else {\n        // 显示枚举节点\n        cy.$('node[type = \"enum\"]').show();\n        // 显示连接到枚举的边\n        cy.$('edge[type = \"enum\"]').show();\n      }\n      \n      // 重新布局，确保能看到动画\n      cy.layout(getLayoutConfig(currentLayout)).run();\n    }\n  };\n\n  const handleResetView = () => {\n    console.log('重置画布视图');\n    if (cyRef.current) {\n      const cy = cyRef.current;\n      cy.fit();\n      cy.center();\n    }\n  };\n\n  const handleResetTo1To1 = () => {\n    console.log('重置为1:1比例');\n    if (cyRef.current) {\n      const cy = cyRef.current;\n      cy.zoom(1);\n      cy.center();\n    }\n  };\n\n  const handleFitView = () => {\n    console.log('适应视图');\n    if (cyRef.current) {\n      const cy = cyRef.current;\n      cy.fit();\n    }\n  };\n\n  const handleExportImage = () => {\n    console.log('导出图片');\n    if (cyRef.current) {\n      const cy = cyRef.current;\n      \n      // 获取画布数据URL\n      const png = cy.png({\n        full: true,\n        quality: 1,\n        output: 'blob'\n      });\n      \n      // 创建下载链接\n      const url = URL.createObjectURL(png);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `schema-graph-${new Date().toISOString().slice(0, 10)}.png`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    }\n  };\n\n  const initCytoscape = async () => {\n    console.log('开始初始化 Cytoscape');\n    \n    // 直接通过 ID 获取容器元素\n    let container = document.getElementById('cytoscape-container');\n    \n    if (!container) {\n      console.error('容器元素未找到!');\n      setError('容器元素未找到');\n      return;\n    }\n\n    console.log('找到容器元素:', container);\n    console.log('容器尺寸:', container.offsetWidth, 'x', container.offsetHeight);\n\n    try {\n      // 获取真实数据\n      console.log('开始获取真实数据...');\n      const [schemasData, enumsData] = await Promise.all([\n        getSchemas({ code: undefined, name: undefined }),\n        getEnums({})\n      ]);\n\n      console.log('获取到的数据表:', schemasData);\n      console.log('获取到的枚举:', enumsData);\n\n      // 先设置状态，确保数据可用\n      setSchemas(schemasData);\n      setEnums(enumsData);\n\n      // 构建 cytoscape 数据\n      const nodes: any[] = [];\n      const edges: any[] = [];\n\n      // 添加数据表节点\n      schemasData.forEach((schema) => {\n        if (schema.code && schema.name) {\n          const label = schema.description \n            ? `${schema.name}\\n${schema.description}`\n            : schema.name;\n          nodes.push({\n            data: {\n              id: schema.code,\n              label: label,\n              type: 'schema',\n              name: schema.name,\n              description: schema.description\n            }\n          });\n        }\n      });\n\n      // 添加枚举节点\n      enumsData.forEach((enumItem) => {\n        if (enumItem.code) {\n          const label = enumItem.description \n            ? `${enumItem.name}\\n${enumItem.description}`\n            : enumItem.name;\n          nodes.push({\n            data: {\n              id: enumItem.code,\n              label: label,\n              type: 'enum',\n              name: enumItem.name,\n              description: enumItem.description\n            }\n          });\n        }\n      });\n\n      // 处理关联关系\n      schemasData.forEach((schema) => {\n        schema.fields?.forEach((field) => {\n          // 处理关联字段\n          if (field.type === 'relation' && field.relationConfig?.targetSchemaCode && field.name && schema.code) {\n            const targetSchema = schemasData.find((s) => s.code === field.relationConfig?.targetSchemaCode);\n            if (targetSchema?.code) {\n              const relationField = field as API.RelationField;\n              const relationType = relationField.relationConfig?.multiple\n                ? relationField.relationConfig?.targetSchemaCode === schema.code\n                  ? \"manyToMany\"\n                  : \"oneToMany\"\n                : relationField.relationConfig?.targetSchemaCode === schema.code\n                ? \"manyToOne\"\n                : \"oneToOne\";\n\n              edges.push({\n                data: {\n                  id: `${schema.code}-${targetSchema.code}-${field.name}`,\n                  source: schema.code,\n                  target: targetSchema.code,\n                  label: `${field.name} (${relationType})`,\n                  type: 'relation',\n                  relationType: relationType\n                }\n              });\n            }\n          }\n          // 处理枚举字段\n          else if (field.type === 'enum' && field.enumConfig?.targetEnumCode && schema.code) {\n            const enumField = field as API.EnumField;\n            const enumSchema = enumsData.find((e) => e.code === enumField.enumConfig?.targetEnumCode);\n            \n            if (enumSchema && enumSchema.code) {\n              edges.push({\n                data: {\n                  id: `${schema.code}-${enumSchema.code}-${field.name}`,\n                  source: schema.code,\n                  target: enumSchema.code,\n                  label: `${field.name} (${enumField.enumConfig?.multiple ? '多选' : '单选'})`,\n                  type: 'enum',\n                  multiple: enumField.enumConfig?.multiple\n                }\n              });\n            }\n          }\n        });\n      });\n\n      const graphData = { nodes, edges };\n      console.log('构建的图谱数据:', graphData);\n\n      console.log('开始创建 Cytoscape 实例...');\n      const cy = cytoscape({\n        container: container,\n        elements: graphData,\n        style: [\n          {\n            selector: 'node',\n            style: {\n              'background-color': 'data(type)',\n              'label': 'data(label)',\n              'color': '#fff',\n              'width': 'data(type)',\n              'height': 'data(type)',\n              'font-size': '13px',\n              'text-valign': 'center',\n              'text-halign': 'center',\n              'text-wrap': 'wrap',\n              'text-max-width': '80px',\n              'border-width': 0\n            }\n          },\n          {\n            selector: 'node[type = \"schema\"]',\n            style: {\n              'background-color': '#1890ff',\n              'width': '100px',\n              'height': '100px',\n              'font-size': '16px',\n              'text-max-width': '90px'\n            }\n          },\n          {\n            selector: 'node[type = \"enum\"]',\n            style: {\n              'background-color': '#52c41a',\n              'width': '80px',\n              'height': '80px',\n              'font-size': '14px',\n              'text-max-width': '70px'\n            }\n          },\n          {\n            selector: 'edge',\n            style: {\n              'width': 2,\n              'line-color': '#fff',\n              'target-arrow-color': '#fff',\n              'target-arrow-shape': 'triangle',\n              'curve-style': 'bezier',\n              'label': 'data(label)',\n              'color': '#fff',\n              'font-size': '10px',\n              'text-rotation': 'autorotate',\n              'text-margin-y': -10\n            }\n          },\n          {\n            selector: 'edge[type = \"relation\"]',\n            style: {\n              'line-color': '#1890ff',\n              'target-arrow-color': '#1890ff',\n              'width': 3\n            }\n          },\n          {\n            selector: 'edge[type = \"enum\"]',\n            style: {\n              'line-color': '#52c41a',\n              'target-arrow-color': '#52c41a',\n              'width': 2,\n              'line-style': 'dashed'\n            }\n          }\n        ],\n        layout: getLayoutConfig('cola')\n      });\n\n      // 保存 cytoscape 实例引用\n      cyRef.current = cy;\n\n      console.log('Cytoscape 实例创建成功:', cy);\n      console.log('节点数量:', cy.nodes().length);\n      console.log('边数量:', cy.edges().length);\n\n      // 添加交互事件\n      cy.on('tap', 'node', function(evt) {\n        const node = evt.target;\n        console.log('点击节点:', node.data());\n        // 直接使用获取到的数据，而不是状态\n        showNodeDetailsWithData(node.data(), schemasData, enumsData);\n      });\n\n      cy.on('tap', 'edge', function(evt) {\n        const edge = evt.target;\n        console.log('点击边:', edge.data());\n        showEdgeDetails(edge.data());\n      });\n\n      // 自动适应容器大小\n      cy.fit();\n      console.log('执行了 cy.fit()');\n      \n      // 强制重新渲染\n      cy.resize();\n      console.log('执行了 cy.resize()');\n      \n    } catch (error) {\n      console.error('Cytoscape 初始化失败:', error);\n      setError('Cytoscape 初始化失败: ' + error);\n    }\n  };\n\n  return (\n    <>\n      <div style={{ width: \"100%\", height: \"calc(100vh - 55px)\", background: \"#000\" }}>\n        {loading ? (\n          <div style={{ \n            display: 'flex', \n            justifyContent: 'center', \n            alignItems: 'center', \n            height: '100%',\n            background: '#000',\n            color: '#fff',\n            fontSize: '20px'\n          }}>\n            加载中...\n          </div>\n        ) : (\n          <div \n            id=\"cytoscape-container\"\n            style={{ \n              width: '100%', \n              height: '100%',\n              background: '#000'\n            }}\n          />\n        )}\n      </div>\n      \n      <Button \n        type=\"primary\"\n        ghost\n        className=\"position-absolute\"\n        style={{ top: \"10px\", left: \"10px\", zIndex: 1000 }}\n        icon={<RollbackOutlined />}\n        onClick={() => {\n          history.back();\n        }}\n      >\n        返回\n      </Button>\n\n      {/* 控制面板 */}\n      <Card\n        size=\"small\"\n        className=\"position-absolute\"\n        style={{ \n          top: \"10px\", \n          right: \"10px\", \n          zIndex: 1000,\n          background: '#fafafa0a',\n          backdropFilter: 'blur(10px)',\n          border: '1px solid rgba(255, 255, 255, 0.2)'\n        }}\n      >\n        <Space size=\"small\">\n          <Checkbox \n            checked={hideEnums}\n            onChange={(e: any) => handleHideEnumsChange(e.target.checked)}\n          >\n            隐藏枚举\n          </Checkbox>\n          \n          <Button \n            size=\"small\"\n            icon={<OneToOneOutlined />}\n            onClick={handleResetTo1To1}\n          >\n            1:1\n          </Button>\n          \n          <Button \n            size=\"small\"\n            icon={<GatewayOutlined />}\n            onClick={handleFitView}\n          />\n          \n          {/* <Select\n            size=\"small\"\n            style={{ width: 120 }}\n            value={currentLayout}\n            onChange={handleLayoutChange}\n            options={layoutOptions}\n            placeholder=\"选择布局\"\n          /> */}\n          \n          <Button \n            size=\"small\"\n            type=\"primary\"\n            icon={<DownloadOutlined />}\n            onClick={handleExportImage}\n          >\n            导出\n          </Button>\n        </Space>\n      </Card>\n\n      <Drawer\n        title={drawerTitle}\n        placement=\"right\"\n        width={600}\n        onClose={() => setDrawerVisible(false)}\n        open={drawerVisible}\n      >\n        {drawerContent && (\n          <>\n            {drawerContent.type === 'schema' && renderSchemaDetails(drawerContent.data)}\n            {drawerContent.type === 'enum' && renderEnumDetails(drawerContent.data)}\n            {drawerContent.type === 'edge' && renderEdgeDetails(drawerContent.data)}\n          </>\n        )}\n      </Drawer>\n    </>\n  );\n};\n\nexport default SchemaGraphNew2; ",
      "__isJSFile": true,
      "__absFile": "/Users/yanfang/MOM/BDC/frontend/src/pages/SchemaGraph/index.tsx"
    },
    "ant-design-pro-layout": {
      "id": "ant-design-pro-layout",
      "path": "/",
      "file": "/Users/yanfang/MOM/BDC/frontend/src/.umi/plugin-layout/Layout.tsx",
      "absPath": "/",
      "isLayout": true,
      "__absFile": "/Users/yanfang/MOM/BDC/frontend/src/.umi/plugin-layout/Layout.tsx"
    }
  },
  "apiRoutes": {},
  "hasSrcDir": true,
  "npmClient": "yarn",
  "umi": {
    "version": "4.4.11",
    "name": "Umi Max",
    "importSource": "@umijs/max",
    "cliName": "max"
  },
  "bundleStatus": {
    "done": false
  },
  "mfsuBundleStatus": {
    "done": false
  },
  "react": {
    "version": "18.3.1",
    "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/react"
  },
  "react-dom": {
    "version": "18.3.1",
    "path": "/Users/yanfang/MOM/BDC/frontend/node_modules/react-dom"
  },
  "appJS": {
    "path": "/Users/yanfang/MOM/BDC/frontend/src/app.tsx",
    "exports": [
      "getInitialState",
      "layout",
      "request"
    ]
  },
  "locale": "zh-CN",
  "globalCSS": [
    "/Users/yanfang/MOM/BDC/frontend/src/global.scss"
  ],
  "globalJS": [],
  "overridesCSS": [
    "/Users/yanfang/MOM/BDC/frontend/src/overrides.scss"
  ],
  "bundler": "webpack",
  "git": {
    "originUrl": "https://github.com/adisonshadow/bdc.git"
  },
  "framework": "react",
  "typescript": {
    "tsVersion": "5.8.3",
    "tslibVersion": "2.8.1"
  },
  "faviconFiles": [],
  "port": 9101,
  "host": "0.0.0.0",
  "ip": "192.168.3.3",
  "antd": {
    "pkgPath": "/Users/yanfang/MOM/BDC/frontend/node_modules/antd",
    "version": "5.25.4"
  },
  "pluginLayout": {
    "pkgPath": "/Users/yanfang/MOM/BDC/frontend/node_modules/@ant-design/pro-components",
    "version": "2.8.7"
  }
}
